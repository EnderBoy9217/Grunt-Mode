untyped

//To-do List
//Set spectre to specialist model on rodeo/dropship or prevent it
//Rebalance spawn?
//add stalker + reaper???

global function BecomesGruntMode_Init

table< string, bool > playerChatterTable
array<string> GRUNT_CHATTERS = [ "diag_sp_intro_WD104_24_01_mcor_grunt1", "diag_sp_intro_WD103_02_01_mcor_grunt2", "diag_sp_intro_WD104_26_01_mcor_grunt3"]
array<string> SPECTRE_CHATTERS = [ "diag_spectre_gs_leechstart_01_1", "diag_spectre_gs_leechend_01_1", "diag_spectre_gs_leechaborted_01_1","diag_spectre_gs_grenadeout_01_1"]
//"diag_sp_intro_WD103_02_01_mcor_grunt2" Backup! Backup!
//"diag_sp_intro_WD104_26_01_mcor_grunt3" We can't stay here, move, move!
//"diag_sp_ReaperTown_BM103_01a_01_mcor_grunt2" Look, a pilot! now they're doing our favor
//"diag_sp_intro_WD104_24_01_mcor_grunt1" They're trying to corner us!

//Randomized loadouts minus anti-titan weapons, which are seperate
array<string> CRIFLE = [ "mp_weapon_rspn101", "mp_weapon_rspn101_og", "mp_weapon_vinson", "mp_weapon_hemlok" ]
array<string> CHEAVY = [ "mp_weapon_lmg", "mp_weapon_smr" ] //Also uses archer but excluded
array<string> CSMG = ["mp_weapon_r97", "mp_weapon_alternator_smg", "mp_weapon_car"] //Original was just R97, but the others were added because MP grunts have them
array<string> CSPECIAL = [ "mp_weapon_hemlok_smg", "mp_weapon_mastiff" ] //Also uses mag launcher but excluded
array<string> CSNIPER = [ "mp_weapon_doubletake", "mp_weapon_sniper" ] //Also uses charge rifle but excluded

// SETTINGS
//--------------------------------------------------------------
int maxClasses = 9 //Number of pickable classes


//-------------------------------------------------------------


//placeholders to make gloabls
int forceChange = 0
int rankUpG = 0
int score = 0

//Player tables
global table<entity, bool> hasSpawned
global table<entity, bool> hasChanged
global table<entity, int> pRank
global table<entity, int> shownClass
global table<entity, int> selectedClass
global table<entity, int> usedScore

void function BecomesGruntMode_Init()
{
	PrecacheModel( $"models/humans/grunts/imc_grunt_shield_captain.mdl" )

	AddCallback_OnClientConnected( OnClientConnected )
	AddCallback_OnPlayerRespawned( OnPlayerRespawned )
	AddCallback_OnPlayerGetsNewPilotLoadout( OnPlayerChangeLoadout )
	AddCallback_OnPlayerKilled( StartKillerOutline )
	AddCallback_OnPlayerKilled( OnGruntKilled )
	AddCallback_OnPlayerKilled( LoadoutScreen )

	AddSpawnCallback( "npc_soldier", PilotConfig )
	AddSpawnCallback( "npc_marvin", MarvinConfig )
	AddSpawnCallback( "npc_prowler", ProwlerConfig )
	AddSpawnCallback( "npc_spectre", SpectreConfig )
	AddSpawnCallback( "npc_stalker", StalkerConfig )
	AddSpawnCallback( "npc_super_spectre", ReaperConfig )
	AddSpawnCallback( "npc_titan", TitanConfig )
	//AddSpawnCallback( "npc_drone", DroneConfig )
	AddSpawnCallback( "npc_gunship", GunshipConfig )
	AddSpawnCallback( "npc_dropship", DropshipConfig )
}

//-----------------------------------------------

void function PilotConfig( entity soldier )
{
	if( IsValid( soldier ) )
	{
		Highlight_SetFriendlyHighlight( soldier, "fw_friendly" )
	}
}

void function MarvinConfig( entity soldier )
{
	if( IsValid( soldier ) )
	{
		soldier.SetMaxHealth( 300 )
		soldier.SetHealth( 300 )
		Highlight_SetFriendlyHighlight( soldier, "fw_friendly" )
		soldier.SetNameVisibleToEnemy( false )
	}
}

void function ProwlerConfig( entity soldier )
{
	if( IsValid( soldier ) )
	{
		Highlight_SetFriendlyHighlight( soldier, "fw_friendly" )
		soldier.SetNameVisibleToEnemy( false )
	}
}

void function SpectreConfig( entity soldier )
{
	if( IsValid( soldier ) )
	{
		soldier.SetMaxHealth( 200 )
		soldier.SetHealth( 200 )
		Highlight_SetFriendlyHighlight( soldier, "fw_friendly" )
		soldier.SetNameVisibleToEnemy( false )
	}
}

void function StalkerConfig( entity soldier )
{
	if( IsValid( soldier ) )
	{
		soldier.SetMaxHealth( 250 )
		soldier.SetHealth( 250 )
		Highlight_SetFriendlyHighlight( soldier, "fw_friendly" )
		soldier.SetNameVisibleToEnemy( false )
	}
}

void function ReaperConfig( entity soldier )
{
	if( IsValid( soldier ) )
	{
		Highlight_SetFriendlyHighlight( soldier, "fw_friendly" )
	}
}

void function TitanConfig( entity soldier )
{
	if( IsValid( soldier ) )
	{
		Highlight_SetFriendlyHighlight( soldier, "fw_friendly" )
	}
}

void function DroneConfig( entity soldier )
{
	if( IsValid( soldier ) )
	{
		soldier.SetMaxHealth( 170 )
		soldier.SetHealth( 170 )
		Highlight_SetFriendlyHighlight( soldier, "fw_friendly" )
		soldier.SetNameVisibleToEnemy( false )
	}
}

void function GunshipConfig( entity soldier )
{
	if( IsValid( soldier ) )
	{
		Highlight_SetFriendlyHighlight( soldier, "fw_friendly" )
	}
}

void function DropshipConfig( entity soldier )
{
	if( IsValid( soldier ) )
	{
		Highlight_SetFriendlyHighlight( soldier, "fw_friendly" )
	}
}

void function OnClientConnected( entity player )
{
	hasSpawned[player] <- false
	hasChanged[player] <- false
	pRank[player] <- 0
	shownClass[player] <- 0
	selectedClass[player] <- 0
	usedScore[player] <- 0

	playerChatterTable[player.GetUID()] <- false
	AddPlayerHeldButtonEventCallback( player, IN_USE, CallbackFuncCornerUs, 0.3 )
	AddButtonPressedPlayerInputCallback( player, IN_USE, CallbackFuncSpotEnemy )
	AddButtonPressedPlayerInputCallback( player, IN_WEAPON_CYCLE, SwitchClassesInput)
	AddButtonPressedPlayerInputCallback( player, IN_OFFHAND0, SwitchClassesInput)
	AddButtonPressedPlayerInputCallback( player, IN_OFFHAND1, SwitchClassesInputBack)
	AddButtonPressedPlayerInputCallback( player, IN_MOVERIGHT, SwitchClassesInput)
	AddButtonPressedPlayerInputCallback( player, IN_MOVELEFT, SwitchClassesInputBack)
	AddButtonPressedPlayerInputCallback( player, IN_FORWARD, SwitchClassesInputBack)
	AddButtonPressedPlayerInputCallback( player, IN_BACK, SwitchClassesInput)
}

void function SwitchClassesInputBack( entity player )
{
	thread SwitchClassesBack( player )
}

void function SwitchClassesBack( entity player )
{
	if (!IsAlive( player ))
	{
		shownClass[player] -= 1
		if (shownClass[player] == -1)
		{
			shownClass[player] <- maxClasses
		}
		int score = player.GetPlayerGameStat(PGS_ASSAULT_SCORE) - usedScore[player]
		UpdateCycle( player, shownClass[player], selectedClass[player], score)
	}
}

void function SwitchClassesInput( entity player ) //Allow user to switch classes
{
	thread SwitchClasses( player )
}

void function SwitchClasses( entity player )
{
	if (!IsAlive( player ))
	{
		shownClass[player] += 1
		if (shownClass[player] == maxClasses+1 )
		{
			shownClass[player] <- 0
		}
		int score = player.GetPlayerGameStat(PGS_ASSAULT_SCORE) - usedScore[player]
		UpdateCycle( player, shownClass[player], selectedClass[player], score)
	}
}


void function LoadoutScreen( entity player, entity attacker, var damageInfo ) //Happens on player killed
{
	//SendHudMessage(player, "message", x-pos, y-pos, r, g, b, opacity (alpha), fade-in-time, hold-time, fade-out-time)
	int score = player.GetPlayerGameStat(PGS_ASSAULT_SCORE) - usedScore[player]
	print("Player Score:")
	print(score)
	int selected = selectedClass[player]
	shownClass[player] = selected
	int shown = selected
	ShowCycle(player,shown,selected, score)
	if (!hasChanged[player])
	{
		thread sendCycleInfo( player )
	}
	sendScoreInfo( player )
}

void function UpdateCycle( entity player, int shown, int selected, int score)
{
	sendClassMessage( player, shown)
	if (!hasChanged[player])
	{
		hasChanged[player] = true
	}
	string title1 = ""
	string title2 = ""
	string title3 = ""
	string title4 = ""
	int classScore = 0
	string str1 = expect string(determineClass( shown ))
	classScore = expect int(determineClassScore( shown ))
	if (classScore > score)
	{
		title1 = "[LOCKED] "
	}
	shown = expect int(increaseShown( shown ))
	string str2 = expect string(determineClass( shown ))
	classScore = expect int(determineClassScore( shown ))
	if (classScore > score)
	{
		title2 = "[LOCKED] "
	}
	shown = expect int(increaseShown( shown ))
	string str3 = expect string(determineClass( shown ))
	classScore = expect int(determineClassScore( shown ))
	if (classScore > score)
	{
		title3 = "[LOCKED] "
	}
	shown = expect int(increaseShown( shown ))
	string str4 = expect string(determineClass( shown ))
	classScore = expect int(determineClassScore( shown ))
	if (classScore > score)
	{
		title4 = "[LOCKED] "
	}
	if (title1 == "")
	{
		selectedClass[player] = shownClass[player]
	}
	else
	{
		selectedClass[player] = 0
	}
	NSEditStatusMessageOnPlayer(player, "[#]",title1 + str1, "status1")
	NSEditStatusMessageOnPlayer(player,"",title2 + str2, "status2")
	NSEditStatusMessageOnPlayer(player,"",title3 + str3, "status3")
	NSEditStatusMessageOnPlayer(player,"",title4 + str4, "status4")
}

void function ShowCycle( entity player, int shown, int selected, int score)
{
	sendClassMessage( player, shown)
	string title1 = ""
	string title2 = ""
	string title3 = ""
	string title4 = ""
	int classScore = 0
	string str1 = expect string(determineClass( shown ))
	classScore = expect int(determineClassScore( shown ))
	if (classScore > score)
	{
		title1 = "[LOCKED] "
		selectedClass[ player ] = 0
	}
	shown = expect int(increaseShown( shown ))
	string str2 = expect string(determineClass( shown ))
	classScore = expect int(determineClassScore( shown ))
	if (classScore > score)
	{
		title2 = "[LOCKED] "
	}
	shown = expect int(increaseShown( shown ))
	string str3 = expect string(determineClass( shown ))
	classScore = expect int(determineClassScore( shown ))
	if (classScore > score)
	{
		title3 = "[LOCKED] "
	}
	shown = expect int(increaseShown( shown ))
	string str4 = expect string(determineClass( shown ))
	classScore = expect int(determineClassScore( shown ))
	if (classScore > score)
	{
		title4 = "[LOCKED] "
	}
	NSCreateStatusMessageOnPlayer(player, "[#]",title1 + str1, "status1")
	NSCreateStatusMessageOnPlayer(player,"",title2 + str2, "status2")
	NSCreateStatusMessageOnPlayer(player,"",title3 + str3, "status3")
	NSCreateStatusMessageOnPlayer(player,"",title4 + str4, "status4")

}

void function sendClassMessage( entity player, int classNum )
{
	string sentText = ""
	switch( classNum )
	{
		case 0:
			sentText = "Rifleman\nHealth: 30\nPrimary: R201, R101, Flatline, and Hemlok\nPossible Mods: HCOG\nPistol: P2016\nAnti-Titan: None\nOrdinance: Frag Grenade\nAbilities: None"
			break
		case 1:
			sentText = "Communications\nHealth: 30\nPrimary: R97, CAR, Alternator\nPossible Mods: Holosight, HCOG\nPistol: P2016\nAnti-Titan: None\nOrdinance: Frag Grenade\nAbilities: None"
			break
		case 2:
			sentText = "Support\nHealth: 30\nPrimary: EVA-8 Auto\nPossible Mods: Extended Magazine\nPistol: P2016\nAnti-Titan: None\nOrdinance: Frag Grenade\nAbilities: None"
			break
		case 3:
			sentText = "Heavy\nHealth: 30\nPrimary: Spitfire, SMR\nPossible Mods: HCOG Ranger\nPistol: Wingman\nAnti-Titan: Archer\nOrdinance: Satchel\nAbilities: None"
			break
		case 4:
			sentText = "Marksman\nHealth: 30\nPrimary: G2A5\nPossible Mods: HCOG Ranger\nPistol: P2016\nAnti-Titan: None\nOrdinace: Frag Grenade\nAbilities: None"
			break
		case 5:
			sentText = "Shield Captain\nHealth: 50\nPrimary: Spitfire\nPossible Mods: AOG\nPistol: Wingman\nAnti-Titan: None\nOrdinance: Electric Smoke Grenade\nAbilities: Personal Shield"
			break
		case 6:
			sentText = "Specialist\nHealth: 40\nPrimary: Volt, Mastiff\nMods: None\nPistol: Mozambique\nAnti-Titan: MGL\nOrdinance: Arc Grenade\nAbilities: Plasma Drone and Beam Drone"
			break
		case 7:
			sentText = "Spectre\nHealth: 45\nPrimary: Volt\nPossible Mods: Holosight\nPistol: P2016\nAnti-Titan: None\nOrdinance: Arc Grenade\nAbilities: Double Jump, Reduced Slide"
			break
		case 8:
			sentText = "Sniper Spectre\nHealth: 45\nPrimary: Kraber, DoubleTake\nMods: None\nPistol: P2016\nAnti-Titan: None\nOrdinance: Arc Grenade\nAbilities: Double Jump, Reduced Slide"
			break
		case 9:
			sentText = "Pilot\nHealth: 200\nPrimary: R201\nMods: HCOG, TacKill, Amped (All Guaranteed)\nPistol: RE-45\nAnti-Titan: Thunderbolt (infinite ammo)\nOrdinance: 2 Frag Grenades (regenerating)\nAbilities: Regenerating Cloak, Double Jump, Wallrun, Advanced Melee"
			break
		default:
			break
	}
	SendHudMessage(player, sentText,  0, -0.3, 255, 255, 255, 255, 0.15, 100, 0.3)
}

void function clearClassMessage( entity player )
{
	SendHudMessage(player, "",  -1, 0.3, 255, 255, 255, 255, 0.1, 0.1, 0.1)
}
void function ClearCycle( entity player )
{
	NSDeleteStatusMessageOnPlayer(player, "status1")
	NSDeleteStatusMessageOnPlayer(player, "status2")
	NSDeleteStatusMessageOnPlayer(player, "status3")
	NSDeleteStatusMessageOnPlayer(player, "status4")
}

function increaseShown( int shown)
{
	shown++
	if (shown == maxClasses+1)
	{
		shown = 0
	}
	return shown
}

function determineClass( int classNum )
{
	string returnClass = "Error"
	switch( classNum )
	{
		case 0:
			returnClass = "Rifleman"
			break
		case 1:
			returnClass = "Communications"
			break
		case 2:
			returnClass = "Support"
			break
		case 3:
			returnClass = "Heavy - 5 points"
			break
		case 4:
			returnClass = "Marksman - 5 points"
			break
		case 5:
			returnClass = "Shield Captain - 15 points"
			break
		case 6:
			returnClass = "Specialist - 30 points"
			break
		case 7:
			returnClass = "Spectre - 30 points"
			break
		case 8:
			returnClass = "Sniper Spectre - 40 points"
			break
		case 9:
			returnClass = "Pilot - 80 points"
		default:
			break
	}
	return returnClass
}

function determineClassScore( int classNum )
{
	switch( classNum )
	{
		case 0:
			return 0
		case 1:
			return 0
		case 2:
			return 0
		case 3:
			return 5
		case 4:
			return 5
		case 5:
			return 15
		case 6:
			return 30
		case 7:
			return 30
		case 8:
			return 40
		case 9:
			return 80
		default:
			print("Invalid Classnumber, fatal error")
			print(classNum)
			return null
	}
}

function RemoveScore( entity player, int classNum )
{
	int classScore = expect int(determineClassScore( classNum ))
	usedScore[player] = usedScore[player] + classScore
}

void function CallbackFuncCornerUs( entity player )
{
	thread CornerUsChatterThink( player )
}

void function CornerUsChatterThink( entity player )
{
	string uid = player.GetUID()
	if( playerChatterTable[uid] )
		return
	if( !IsAlive( player ) )
		return
	string curChatter = "h"
	//print( "Setting Chatter Unusable" )
	if (player.GetModelName == $"models/robots/spectre/imc_spectre.mdl" || player.GetModelName == $"models/humans/pilots/pilot_light_ged_m.mdl")
	{
		curChatter = SPECTRE_CHATTERS[ RandomInt( SPECTRE_CHATTERS.len() ) ]
	}
	else
	{
		curChatter = GRUNT_CHATTERS[ RandomInt( GRUNT_CHATTERS.len() ) ]
	}

	EmitSoundOnEntity( player, curChatter )
	thread DelayedRestoreBattleChatter( uid, 3 )
	//print( "Reset Chatter Usage" )
}

void function CallbackFuncSpotEnemy( entity player )
{
	thread SpotEnemyChatterThink( player )
}

void function SpotEnemyChatterThink( entity player )
{
	string uid = player.GetUID()
	if( playerChatterTable[uid] )
		return
	if( !IsAlive( player ) )
		return
	TraceResults traceResult = TraceLine( player.EyePosition(), player.EyePosition() + player.GetViewVector() * 1500, player, (TRACE_MASK_SHOT | CONTENTS_BLOCKLOS), TRACE_COLLISION_GROUP_NONE )
	if( !IsValid( traceResult.hitEnt ) )
	{
		//print( "Didn't trace anything" )
		return
	}
	if( !traceResult.hitEnt.IsNPC() )
	{
		//print( "hitEnt wasn't npc" )
		return
	}
	if( traceResult.hitEnt.GetTeam() == player.GetTeam() )
		return
	array<string> chatterClasses = [ "npc_spectre", "npc_stalker", "npc_prowler", "npc_soldier", "npc_titan" ]
	string className = traceResult.hitEnt.GetClassName()
	//print( "hitEnt's classname: " + className )
	if( !chatterClasses.contains( className ) )
		return
	switch( className )
	{
		case "npc_spectre":
			EmitSoundOnEntity( player, "diag_imc_grunt" + string( RandomIntRange( 1, 6 ) ) + "_bc_reactSpectreEnemyMid_0" + string( RandomIntRange( 1, 3 ) ) )
			thread DelayedRestoreBattleChatter( uid, 3 )
			break
		case "npc_stalker":
			EmitSoundOnEntity( player, "diag_imc_grunt" + string( RandomIntRange( 1, 6 ) ) + "_bc_engagingStalker_0" + string( RandomIntRange( 1, 2 ) ) )
			thread DelayedRestoreBattleChatter( uid, 3 )
			break
		case "npc_prowler":
			EmitSoundOnEntity( player, "diag_imc_grunt" + string( RandomIntRange( 1, 6 ) ) + "_bc_engagingProwler_0" + string( RandomIntRange( 1, 2 ) ) )
			thread DelayedRestoreBattleChatter( uid, 3 )
			break
		case "npc_soldier":
			EmitSoundOnEntity( player, "diag_imc_grunt" + string( RandomIntRange( 1, 6 ) ) + "_bc_engagepilotenemy_0" + string( RandomIntRange( 1, 7 ) ) )
			thread DelayedRestoreBattleChatter( uid, 3 )
			break
		case "npc_titan":
			EmitSoundOnEntity( player, "diag_imc_grunt" + string( RandomIntRange( 1, 6 ) ) + "_bc_enemytitanspotcall_0" + string( RandomIntRange( 1, 2 ) ) )
			thread DelayedRestoreBattleChatter( uid, 5 )
			break
		case "npc_super_spectre":
			if( CoinFlip() )
				EmitSoundOnEntity( player, "diag_sp_ReaperTown_BM102_15_01_mcor_grunt3" )
			else
				EmitSoundOnEntity( player, "diag_sp_ReaperTown_BM102_16_01_mcor_grunt2" )
			thread DelayedRestoreBattleChatter( uid, 3 )
			break
	}
}

void function DelayedRestoreBattleChatter( string uid, float delay )
{
	playerChatterTable[uid] = true
	wait delay
	playerChatterTable[uid] = false
}

void function OnPlayerRespawned( entity player )
{


	//if( GetZiplineDropshipSpawns().len() != 0 )
	//	RespawnInDropShip( player )
	//else
	clearClassMessage( player )
	TakeAllWeapons(player)
	if (hasSpawned[player])
	{
		BecomesGrunt_Class(player, selectedClass[player])
		RemoveScore( player, selectedClass[player] )
	}
	else
	{
		BecomesGrunt_Random(player)
	}
	SpawnFromDroppod( player )
	thread OnPlayerRespawned_Threaded( player )
}

void function OnPlayerRespawned_Threaded( entity player )
{
	WaitFrame()
	if( IsValid(player) )
		PlayerEarnMeter_SetMode( player, eEarnMeterMode.DISABLED )	//彻底关闭强化(泰坦)条
	ClearCycle(player)
	if (!hasSpawned[player])
	{
		hasSpawned[player] = true
		thread sendPingInfo(player)
	}
}

void function sendPingInfo( entity player )
{
	wait 16
	print("Sending ping info")
	NSSendInfoMessageToPlayer(player, "Hold 'interact' to say a voiceline, or press 'interact' to call out enemies")
}

void function sendScoreInfo( entity player )
{
	int score = player.GetPlayerGameStat(PGS_ASSAULT_SCORE) - usedScore[player]
	NSSendPopUpMessageToPlayer( player, "You have " + score + " points to spend")
}

void function sendCycleInfo( entity player )
{
	wait 1
	print("Sending change info")
	NSSendInfoMessageToPlayer(player, "Use WASD or Controller Bumpers while in the deployment screen to switch classes")
}
void function StartKillerOutline( entity victim, entity attacker, var damageInfo )
{
	if( attacker.IsNPC() || attacker.IsPlayer() )
		Highlight_SetDeathRecapHighlight( attacker, "killer_outline" )
}

void function OnGruntKilled( entity victim, entity attacker, var damageInfo )
{
	PlayEnemyKilledChatter( victim, attacker )
	PlayFriendlyKilledChatter( victim, attacker )
}

void function PlayEnemyKilledChatter( entity victim, entity attacker )
{
	if( victim.IsPlayer() && attacker.IsPlayer() )
		thread DelayedEnemyKilledChatter( attacker )
}

void function DelayedEnemyKilledChatter( entity player )
{
	string uid = player.GetUID()
	if( playerChatterTable[uid] )
		return
	wait RandomFloatRange( 0.3, 0.5 )
	if( IsAlive( player ) )
	{
		EmitSoundOnEntity( player, "diag_imc_grunt" + string( RandomIntRange( 1, 6 ) ) + "_bc_killenemygrunt_0" + string( RandomIntRange( 1, 2 ) ) )
	}
	thread DelayedRestoreBattleChatter( uid, 3 )
}

void function PlayFriendlyKilledChatter( entity victim, entity attacker )
{
	int team = victim.GetTeam()
	array<entity> nearbyAllies = GetPlayerArrayEx( "any", TEAM_ANY, TEAM_ANY, victim.GetOrigin(), 250 )
	foreach( entity player in nearbyAllies )
	{
		if( IsValid( player ) )
		{
			if( player.GetTeam() == team )
				thread DelayedFriendlyKilledChatter( player )
		}
	}
}

void function DelayedFriendlyKilledChatter( entity player )
{
	string uid = player.GetUID()
	if( playerChatterTable[uid] )
		return
	wait RandomFloatRange( 0.3, 0.5 )
	if( IsAlive( player ) )
	{
		array<entity> nearbyAllies = GetPlayerArrayEx( "any", player.GetTeam(), TEAM_ANY, player.GetOrigin(), 250 )
		if( nearbyAllies.len() == 0 )
		{
			EmitSoundOnEntity( player, "diag_imc_grunt" + string( RandomIntRange( 1, 6 ) ) + "_bc_squaddeplete" )
			thread DelayedRestoreBattleChatter( uid, 5 )
		}
		else
		{
			EmitSoundOnEntity( player, "diag_imc_grunt" + string( RandomIntRange( 1, 6 ) ) + "_bc_allygruntdown" )
			thread DelayedRestoreBattleChatter( uid, 3 )
		}
	}
}

void function OnPlayerChangeLoadout( entity player , PilotLoadoutDef p)
{
	BecomesGrunt_Loadout( player )
}

void function BecomesGrunt_Loadout( entity player )
{
	if( IsValid( player ) )
	{
		TakeAllWeapons( player )
		Highlight_SetFriendlyHighlight( player, "fw_friendly" )
		//player.kv.gravity = 1.4
		//HideName( player )
		player.SetNameVisibleToEnemy( false )
	}
}

void function SetGruntSkin( entity player, string pMods, string pModel )
{
	if (pModel == "models/humans/pilots/pilot_light_ged_m.mdl")
	{
		player.SetModel( $"models/humans/pilots/pilot_light_ged_m.mdl")
	}
	else if(pModel == "models/robots/spectre/imc_spectre.mdl")
	{
		player.SetModel( $"models/robots/spectre/imc_spectre.mdl")
	}
	else if(pModel == "models/robots/marvin/marvin.mdl")
	{
		player.SetModel( $"models/robots/marvin/marvin.mdl")
	}
	else if (pModel == "models/humans/grunts/imc_grunt_shield_captain.mdl")
	{
		player.SetModel( $"models/humans/grunts/imc_grunt_shield_captain.mdl")
	} //MLT
	else if (pModel == "models/humans/grunts/mlt_grunt_shotgun.mdl")
	{
		player.SetModel( $"models/humans/grunts/mlt_grunt_shotgun.mdl")
	}
	else if (pModel == "models/humans/grunts/mlt_grunt_rifle.mdl")
	{
		player.SetModel( $"models/humans/grunts/mlt_grunt_rifle.mdl")
	}
	else if (pModel == "models/humans/grunts/mlt_grunt_shotgun.mdl")
	{
		player.SetModel( $"models/humans/grunts/mlt_grunt_shotgun.mdl")
	}
	else if (pModel == "models/humans/grunts/mlt_grunt_smg.mdl")
	{
		player.SetModel( $"models/humans/grunts/mlt_grunt_smg.mdl")
	}
	else if (pModel == "models/humans/grunts/mlt_grunt_lmg.mdl")
	{
		player.SetModel( $"models/humans/grunts/mlt_grunt_lmg.mdl")
	} //IMC
	else if (pModel == "models/humans/grunts/imc_grunt_shotgun.mdl")
	{
		player.SetModel( $"models/humans/grunts/imc_grunt_shotgun.mdl")
	}
	else if (pModel == "models/humans/grunts/imc_grunt_rifle.mdl")
	{
		player.SetModel( $"models/humans/grunts/imc_grunt_rifle.mdl")
	}
	else if (pModel == "models/humans/grunts/imc_grunt_shotgun.mdl")
	{
		player.SetModel( $"models/humans/grunts/imc_grunt_shotgun.mdl")
	}
	else if (pModel == "models/humans/grunts/imc_grunt_smg.mdl")
	{
		player.SetModel( $"models/humans/grunts/imc_grunt_smg.mdl")
	}
	else if (pModel == "models/humans/grunts/imc_grunt_lmg.mdl")
	{
		player.SetModel( $"models/humans/grunts/imc_grunt_lmg.mdl")
	}
	else if (pModel == "models/humans/pilots/pilot_light_core.mdl")
	{
		player.SetModel( $"models/humans/pilots/pilot_medium_geist_m.mdl")
	}
}

void function RandomMods(entity player, string weapon, array<string> mods)
{
	int randomM = RandomInt(2)
	switch(randomM)
	{
		case 0: // No mod
			player.GiveWeapon( weapon )
			break
		case 1: // Mod
			player.GiveWeapon(weapon,mods)
			//print("Gave modded weapon")
			break
		default:
			break
	}
}

void function BecomesGrunt_Random( entity player )
{
	int classNum = RandomInt(7)
	BecomesGrunt_Class( player, classNum )
}

void function BecomesGrunt_Class( entity player, int classNum )
{
	if( IsValid(player) )
	{
		TakeAllWeapons( player )
		string secondary = "mp_weapon_semipistol"
		bool antiTitanTrue = false
		string antiTitan = "mp_weapon_rocket_launcher"
		string pMods = "Grunt"
		bool pilotMelee = false
		string pModel = "models/humans/grunts/mlt_grunt_rifle.mdl"
		switch( classNum )
		{
			case 0: //Rifleman
				if( player.GetTeam() == TEAM_IMC )
				{
					pModel = "models/humans/grunts/imc_grunt_rifle.mdl"
				}
				else
				{
					pModel = "models/humans/grunts/mlt_grunt_rifle.mdl"
				}
				SendHudMessage(player, "Spawning as Rifleman",  -1, -0.2, 255, 255, 255, 255, 0.15, 6, 1)
				string weapon = CRIFLE[ RandomInt( CRIFLE.len() ) ]
				RandomMods(player,weapon,["hcog"])
				player.GiveOffhandWeapon( "mp_weapon_frag_grenade", OFFHAND_ORDNANCE, ["grunt_mode"] )
				player.SetHealth( 30 )
				player.SetMaxHealth( 30 )
				antiTitanTrue = false
				break
			case 1: //SMG
				if( player.GetTeam() == TEAM_IMC )
				{
					pModel = "models/humans/grunts/imc_grunt_smg.mdl"
				}
				else
				{
					pModel = "models/humans/grunts/mlt_grunt_smg.mdl"
				}
				SendHudMessage(player, "Spawning as Communications",  -1, -0.2, 255, 255, 255, 255, 0.15, 6, 1)
				string weapon = CSMG[ RandomInt( CSMG.len() ) ]
				if (weapon != "mp_weapon_alternator_smg")
				{
					RandomMods(player,weapon,["holosight"])
				}
				else
				{
					RandomMods(player,weapon,["hcog"])
				}
				player.GiveOffhandWeapon( "mp_weapon_frag_grenade", OFFHAND_ORDNANCE, ["grunt_mode"] )
				antiTitanTrue = false
				player.SetHealth( 30 )
				player.SetMaxHealth( 30 )
				break
			case 2: //Shotgun
				if( player.GetTeam() == TEAM_IMC )
				{
					pModel = "models/humans/grunts/imc_grunt_shotgun.mdl"
				}
				else
				{
					pModel = "models/humans/grunts/mlt_grunt_shotgun.mdl"
				}
				SendHudMessage(player, "Spawning as Support",  -1, -0.2, 255, 255, 255, 255, 0.15, 6, 1)
				RandomMods(player,"mp_weapon_shotgun",["extended_ammo"])
				player.GiveOffhandWeapon( "mp_weapon_frag_grenade", OFFHAND_ORDNANCE, ["grunt_mode"] )
				antiTitanTrue = false
				player.SetHealth( 30 )
				player.SetMaxHealth( 30 )
				break
			case 3: //Heavy
				if( player.GetTeam() == TEAM_IMC )
				{
					pModel = "models/humans/grunts/imc_grunt_lmg.mdl"
				}
				else
				{
					pModel = "models/humans/grunts/mlt_grunt_lmg.mdl"
				}
				SendHudMessage(player, "Spawning as Heavy",  -1, -0.2, 255, 255, 255, 255, 0.15, 6, 1)
				string weapon = CHEAVY[ RandomInt( CHEAVY.len() ) ]
				secondary = "mp_weapon_wingman"
				if (weapon != "mp_weapon_smr")
				{
					RandomMods(player,weapon,["redline_sight"])
				}
				else
				{
					player.GiveWeapon("mp_weapon_smr")
				}
				player.GiveOffhandWeapon( "mp_weapon_satchel", OFFHAND_ORDNANCE, ["grunt_mode"] )
				antiTitan = "mp_weapon_rocket_launcher"
				antiTitanTrue = true
				player.SetHealth( 30 )
				player.SetMaxHealth( 30 )
				break
			case 4: // Marksman
				if( player.GetTeam() == TEAM_IMC )
				{
					pModel = "models/humans/grunts/imc_grunt_rifle.mdl"
				}
				else
				{
					pModel = "models/humans/grunts/mlt_grunt_rifle.mdl"
				}
				RandomMods(player, "mp_weapon_g2", ["redline_sight"])
				SendHudMessage(player, "Spawning as Marksman",  -1, -0.2, 255, 255, 255, 255, 0.15, 6, 1)
				player.GiveOffhandWeapon( "mp_weapon_frag_grenade", OFFHAND_ORDNANCE, ["grunt_mode"] )
				antiTitanTrue = false
				player.SetHealth( 30 )
				player.SetMaxHealth( 30 )
				break
			case 5: //Captain
				pModel = "models/humans/grunts/imc_grunt_shield_captain.mdl"
				SendHudMessage(player, "Spawning as Shield Captain",  -1, -0.2, 255, 255, 255, 255, 0.15, 6, 1)
				RandomMods(player,"mp_weapon_lmg",["aog"])
				secondary = "mp_weapon_wingman"
				player.GiveOffhandWeapon( "mp_weapon_grenade_electric_smoke", OFFHAND_ORDNANCE, ["grunt_mode"] )
				antiTitanTrue = false
				thread ActivatePersonalShield( player )
				player.SetHealth( 50 )
				player.SetMaxHealth( 50 )
				break
			case 6: //Specialist
				pModel = "models/humans/pilots/pilot_light_ged_m.mdl"
				SendHudMessage(player, "Spawning as Specialist",  -1, -0.2, 255, 255, 255, 255, 0.15, 6, 1)
				player.GiveOffhandWeapon( "mp_weapon_grenade_emp", OFFHAND_ORDNANCE, ["grunt_mode"] )
				secondary = "mp_weapon_shotgun_pistol"
				player.GiveOffhandWeapon( "mp_weapon_frag_drone", OFFHAND_SPECIAL, ["drone_spawner"] )
				player.GiveWeapon(CSPECIAL[ RandomInt( CSPECIAL.len() ) ])
				antiTitanTrue = true
				antiTitan = "mp_weapon_mgl"
				player.SetHealth( 40 )
				player.SetMaxHealth( 40 )
				break
			case 7: //Spectre
				pModel = "models/robots/spectre/imc_spectre.mdl"
				SendHudMessage(player, "Spawning as Spectre",  -1, -0.2, 255, 255, 255, 255, 0.15, 6, 1)
				RandomMods(player,"mp_weapon_hemlok_smg",["holosight"])
				player.GiveOffhandWeapon( "mp_weapon_grenade_emp", OFFHAND_ORDNANCE, ["grunt_mode"] )
				antiTitanTrue = false
				player.SetHealth( 45 )
				player.SetMaxHealth( 45 )
				pMods = "Spectre"
				break
			case 8: //Sniper Spectre
				pModel = "models/robots/spectre/imc_spectre.mdl"
				SendHudMessage(player, "Spawning as Sniper Spectre",  -1, -0.2, 255, 255, 255, 255, 0.15, 6, 1)
				player.GiveWeapon( CSNIPER[ RandomInt( CSNIPER.len() ) ] )
				player.GiveOffhandWeapon( "mp_weapon_grenade_emp", OFFHAND_ORDNANCE, ["grunt_mode"] )
				antiTitanTrue = true
				antiTitan = "mp_weapon_defender"
				player.SetHealth( 45 )
				player.SetMaxHealth( 45 )
				pMods = "Spectre"
				break
			case 9: //Pilot
				pModel = "models/humans/pilots/pilot_light_core.mdl"
				SendHudMessage(player, "Respawning as Pilot",  -1, -0.2, 255, 255, 255, 255, 0.15, 6, 1)
				player.GiveWeapon("mp_weapon_rspn101", ["hcog", "tactical_cdr_on_kill","burn_mod_rspn101"])
				secondary = "mp_weapon_autopistol"
				player.GiveOffhandWeapon( "mp_weapon_frag_grenade", OFFHAND_ORDNANCE)
				player.GiveOffhandWeapon( "mp_ability_cloak", OFFHAND_SPECIAL)
				pilotMelee = true
				antiTitanTrue = true
				antiTitan = "mp_weapon_arc_launcher"
				player.SetMaxHealth( 200 )
				player.SetHealth( 200 )
				pMods = "Pilot"
				break
			default:
				break
		}
		player.GiveWeapon( secondary )
		if (antiTitanTrue == true)
		{
			if (antiTitan == "mp_weapon_arc_launcher")
			{
				player.GiveWeapon( antiTitan, ["at_unlimited_ammo"] )
			}
			else
			{
				player.GiveWeapon( antiTitan )
			}
		}
		if (pilotMelee == true)
		{
			player.GiveOffhandWeapon( "melee_pilot_emptyhanded", OFFHAND_MELEE)
		}
		else
		{
			player.GiveOffhandWeapon( "melee_pilot_emptyhanded", OFFHAND_MELEE, ["grunt_mode"] )
		}
		if (pMods == "Spectre")
		{
			player.SetPlayerSettingsWithMods( player.GetPlayerSettings(), ["enable_double", "disable_wallrun", "spectre_speedmod"])
		}
		else if (pMods == "Pilot")
		{
			player.SetPlayerSettingsWithMods( player.GetPlayerSettings(), ["enable_double", "enable_wallrun"])
		}
		else
		{
			player.SetPlayerSettingsWithMods( player.GetPlayerSettings(), ["disable_doublejump", "disable_wallrun", "less_powerful_gilde"])
		}
		SetGruntSkin( player, pMods, pModel)
	}
}