untyped

//To-do List
//Set spectre to specialist model on rodeo/dropship or prevent it
//add stalker + reaper??? (Fix above problem)

global function BecomesGruntMode_Init

table< string, bool > playerChatterTable
array<string> GRUNT_CHATTERS = [ "diag_sp_intro_WD104_24_01_mcor_grunt1", "diag_sp_intro_WD103_02_01_mcor_grunt2", "diag_sp_intro_WD104_26_01_mcor_grunt3"]
array<string> SPECTRE_CHATTERS = [ "diag_spectre_gs_leechstart_01_1", "diag_spectre_gs_leechend_01_1", "diag_spectre_gs_leechaborted_01_1","diag_spectre_gs_grenadeout_01_1"]
//"diag_sp_intro_WD103_02_01_mcor_grunt2" Backup! Backup!
//"diag_sp_intro_WD104_26_01_mcor_grunt3" We can't stay here, move, move!
//"diag_sp_ReaperTown_BM103_01a_01_mcor_grunt2" Look, a pilot! now they're doing our favor
//"diag_sp_intro_WD104_24_01_mcor_grunt1" They're trying to corner us!

//Randomized loadouts minus anti-titan weapons, which are seperate
array<string> CRIFLE = [ "mp_weapon_rspn101", "mp_weapon_rspn101_og", "mp_weapon_vinson", "mp_weapon_hemlok" ]
array<string> CHEAVY = [ "mp_weapon_lmg", "mp_weapon_smr" ] //Also uses archer but excluded
array<string> CSMG = ["mp_weapon_r97", "mp_weapon_alternator_smg", "mp_weapon_car"] //Original was just R97, but the others were added because MP grunts have them
array<string> CSPECIAL = [ "mp_weapon_hemlok_smg", "mp_weapon_mastiff" ] //Also uses mag launcher but excluded
array<string> CSNIPER = [ "mp_weapon_doubletake", "mp_weapon_sniper" ] //Also uses charge rifle but excluded

//placeholders to make gloabls
string secondary = "mp_weapon_semipistol"
string grenade = "mp_weapon_frag_grenade"
int forceChange = 0
int rankUpG = 0

//Player tables
global table<entity, bool> hasSpawned //Now mostly unused
global table<entity, int> pRank

void function BecomesGruntMode_Init()
{
	PrecacheModel( $"models/humans/grunts/imc_grunt_shield_captain.mdl" )

	AddCallback_OnClientConnected( OnClientConnected )
	AddCallback_OnPlayerRespawned( OnPlayerRespawned )
	AddCallback_OnPlayerGetsNewPilotLoadout( OnPlayerChangeLoadout )
	AddCallback_OnPlayerKilled( StartKillerOutline )
	AddCallback_OnPlayerKilled( OnGruntKilled )

	AddSpawnCallback( "npc_soldier", PilotConfig )
	AddSpawnCallback( "npc_marvin", MarvinConfig )
	AddSpawnCallback( "npc_prowler", ProwlerConfig )
	AddSpawnCallback( "npc_spectre", SpectreConfig )
	AddSpawnCallback( "npc_stalker", StalkerConfig )
	AddSpawnCallback( "npc_super_spectre", ReaperConfig )
	AddSpawnCallback( "npc_titan", TitanConfig )
	//AddSpawnCallback( "npc_drone", DroneConfig )
	AddSpawnCallback( "npc_gunship", GunshipConfig )
	AddSpawnCallback( "npc_dropship", DropshipConfig )
}

//-----------------------------------------------

void function PilotConfig( entity soldier )
{
	if( IsValid( soldier ) )
	{
		Highlight_SetFriendlyHighlight( soldier, "fw_friendly" )
	}
}

void function MarvinConfig( entity soldier )
{
	if( IsValid( soldier ) )
	{
		soldier.SetMaxHealth( 300 )
		soldier.SetHealth( 300 )
		Highlight_SetFriendlyHighlight( soldier, "fw_friendly" )
		soldier.SetNameVisibleToEnemy( false )
	}
}

void function ProwlerConfig( entity soldier )
{
	if( IsValid( soldier ) )
	{
		Highlight_SetFriendlyHighlight( soldier, "fw_friendly" )
		soldier.SetNameVisibleToEnemy( false )
	}
}

void function SpectreConfig( entity soldier )
{
	if( IsValid( soldier ) )
	{
		soldier.SetMaxHealth( 170 )
		soldier.SetHealth( 170 )
		Highlight_SetFriendlyHighlight( soldier, "fw_friendly" )
		soldier.SetNameVisibleToEnemy( false )
	}
}

void function StalkerConfig( entity soldier )
{
	if( IsValid( soldier ) )
	{
		soldier.SetMaxHealth( 250 )
		soldier.SetHealth( 250 )
		Highlight_SetFriendlyHighlight( soldier, "fw_friendly" )
		soldier.SetNameVisibleToEnemy( false )
	}
}

void function ReaperConfig( entity soldier )
{
	if( IsValid( soldier ) )
	{
		Highlight_SetFriendlyHighlight( soldier, "fw_friendly" )
	}
}

void function TitanConfig( entity soldier )
{
	if( IsValid( soldier ) )
	{
		Highlight_SetFriendlyHighlight( soldier, "fw_friendly" )
	}
}

void function DroneConfig( entity soldier )
{
	if( IsValid( soldier ) )
	{
		soldier.SetMaxHealth( 170 )
		soldier.SetHealth( 170 )
		Highlight_SetFriendlyHighlight( soldier, "fw_friendly" )
		soldier.SetNameVisibleToEnemy( false )
	}
}

void function GunshipConfig( entity soldier )
{
	if( IsValid( soldier ) )
	{
		Highlight_SetFriendlyHighlight( soldier, "fw_friendly" )
	}
}

void function DropshipConfig( entity soldier )
{
	if( IsValid( soldier ) )
	{
		Highlight_SetFriendlyHighlight( soldier, "fw_friendly" )
	}
}

void function OnClientConnected( entity player )
{
	hasSpawned[player] <- false
	pRank[player] <- 0
	playerChatterTable[player.GetUID()] <- false
	AddPlayerHeldButtonEventCallback( player, IN_USE, CallbackFuncCornerUs, 0.3 )
	AddButtonPressedPlayerInputCallback( player, IN_USE, CallbackFuncSpotEnemy )
	SendHudMessage(player, "Star grenades and Anti-Titan weapons are unavailable in this gamemode",  -1, 0.2, 255, 255, 255, 255, 0.15, 6, 1)
}

void function CallbackFuncCornerUs( entity player )
{
	thread CornerUsChatterThink( player )
}

void function CornerUsChatterThink( entity player )
{
	string uid = player.GetUID()
	if( playerChatterTable[uid] )
		return
	if( !IsAlive( player ) )
		return
	string curChatter = "h"
	//print( "Setting Chatter Unusable" )
	if (player.GetModelName == $"models/robots/spectre/imc_spectre.mdl" || player.GetModelName == $"models/humans/pilots/pilot_light_ged_m.mdl")
	{
		curChatter = SPECTRE_CHATTERS[ RandomInt( SPECTRE_CHATTERS.len() ) ]
	}
	else
	{
		curChatter = GRUNT_CHATTERS[ RandomInt( GRUNT_CHATTERS.len() ) ]
	}

	EmitSoundOnEntity( player, curChatter )
	thread DelayedRestoreBattleChatter( uid, 3 )
	//print( "Reset Chatter Usage" )
}

void function CallbackFuncSpotEnemy( entity player )
{
	thread SpotEnemyChatterThink( player )
}

void function SpotEnemyChatterThink( entity player )
{
	string uid = player.GetUID()
	if( playerChatterTable[uid] )
		return
	if( !IsAlive( player ) )
		return
	TraceResults traceResult = TraceLine( player.EyePosition(), player.EyePosition() + player.GetViewVector() * 1500, player, (TRACE_MASK_SHOT | CONTENTS_BLOCKLOS), TRACE_COLLISION_GROUP_NONE )
	if( !IsValid( traceResult.hitEnt ) )
	{
		//print( "Didn't trace anything" )
		return
	}
	if( !traceResult.hitEnt.IsNPC() )
	{
		//print( "hitEnt wasn't npc" )
		return
	}
	if( traceResult.hitEnt.GetTeam() == player.GetTeam() )
		return
	array<string> chatterClasses = [ "npc_spectre", "npc_stalker", "npc_prowler", "npc_soldier", "npc_titan" ]
	string className = traceResult.hitEnt.GetClassName()
	//print( "hitEnt's classname: " + className )
	if( !chatterClasses.contains( className ) )
		return
	switch( className )
	{
		case "npc_spectre":
			EmitSoundOnEntity( player, "diag_imc_grunt" + string( RandomIntRange( 1, 6 ) ) + "_bc_reactSpectreEnemyMid_0" + string( RandomIntRange( 1, 3 ) ) )
			thread DelayedRestoreBattleChatter( uid, 3 )
			break
		case "npc_stalker":
			EmitSoundOnEntity( player, "diag_imc_grunt" + string( RandomIntRange( 1, 6 ) ) + "_bc_engagingStalker_0" + string( RandomIntRange( 1, 2 ) ) )
			thread DelayedRestoreBattleChatter( uid, 3 )
			break
		case "npc_prowler":
			EmitSoundOnEntity( player, "diag_imc_grunt" + string( RandomIntRange( 1, 6 ) ) + "_bc_engagingProwler_0" + string( RandomIntRange( 1, 2 ) ) )
			thread DelayedRestoreBattleChatter( uid, 3 )
			break
		case "npc_soldier":
			EmitSoundOnEntity( player, "diag_imc_grunt" + string( RandomIntRange( 1, 6 ) ) + "_bc_engagepilotenemy_0" + string( RandomIntRange( 1, 7 ) ) )
			thread DelayedRestoreBattleChatter( uid, 3 )
			break
		case "npc_titan":
			EmitSoundOnEntity( player, "diag_imc_grunt" + string( RandomIntRange( 1, 6 ) ) + "_bc_enemytitanspotcall_0" + string( RandomIntRange( 1, 2 ) ) )
			thread DelayedRestoreBattleChatter( uid, 5 )
			break
		case "npc_super_spectre":
			if( CoinFlip() )
				EmitSoundOnEntity( player, "diag_sp_ReaperTown_BM102_15_01_mcor_grunt3" )
			else
				EmitSoundOnEntity( player, "diag_sp_ReaperTown_BM102_16_01_mcor_grunt2" )
			thread DelayedRestoreBattleChatter( uid, 3 )
			break
	}
}

void function DelayedRestoreBattleChatter( string uid, float delay )
{
	playerChatterTable[uid] = true
	wait delay
	playerChatterTable[uid] = false
}

void function OnPlayerRespawned( entity player )
{	


	rankUpG = 0
	print("Score")
	print(player.GetPlayerGameStat(PGS_ASSAULT_SCORE))

	if (pRank[player] == 0)
		if (player.GetPlayerGameStat(PGS_ASSAULT_SCORE) >= 20)
		{
			pRank[player] = 1
			rankUpG = 1
		}
	if (pRank[player] == 1)
		if (player.GetPlayerGameStat(PGS_ASSAULT_SCORE) >= 40)
		{
			pRank[player] = 2
			rankUpG = 2
		}
	if (pRank[player] == 2)
		if (player.GetPlayerGameStat(PGS_ASSAULT_SCORE) >= 60)
		{
			pRank[player] = 3
			rankUpG = 3
		}
	BecomesGrunt_Model( player )
	//if( GetZiplineDropshipSpawns().len() != 0 )
	//	RespawnInDropShip( player )
	//else
		SpawnFromDroppod( player )
		if (hasSpawned[player] != true)
		{
			SendHudMessage(player, "Star grenades and Anti-Titan weapons are unavailable in this gamemode",  -1, 0.2, 255, 255, 255, 255, 0.15, 6, 1)
			hasSpawned[player] = true
		}
		if (rankUpG == 1)
		{
			SendHudMessage(player, "You have been promoted to Rifleman Class 3 and unlocked the Specialist class",  -1, 0.2, 255, 255, 255, 255, 0.15, 6, 1)
		}
		if (rankUpG == 2)
		{
			SendHudMessage(player, "You have been promoted to Rifleman Class 2 and earned the Spectre class",  -1, 0.2, 255, 255, 255, 255, 0.15, 6, 1)
		}
		if (rankUpG == 3)
		{
			SendHudMessage(player, "You have been promoted to Rifleman Class 1 and earned the Sniper Spectre class",  -1, 0.2, 255, 255, 255, 255, 0.15, 6, 1)
		}
	thread OnPlayerRespawned_Threaded( player )
}

void function OnPlayerRespawned_Threaded( entity player )
{
	WaitFrame()
	if( IsValid(player) )
		PlayerEarnMeter_SetMode( player, eEarnMeterMode.DISABLED )	//彻底关闭强化(泰坦)条
}

void function StartKillerOutline( entity victim, entity attacker, var damageInfo )
{
	if( attacker.IsNPC() || attacker.IsPlayer() )
		Highlight_SetDeathRecapHighlight( attacker, "killer_outline" )
}

void function OnGruntKilled( entity victim, entity attacker, var damageInfo )
{
	PlayEnemyKilledChatter( victim, attacker )
	PlayFriendlyKilledChatter( victim, attacker )
}

void function PlayEnemyKilledChatter( entity victim, entity attacker )
{
	if( victim.IsPlayer() && attacker.IsPlayer() )
		thread DelayedEnemyKilledChatter( attacker )
}

void function DelayedEnemyKilledChatter( entity player )
{
	string uid = player.GetUID()
	if( playerChatterTable[uid] )
		return
	wait RandomFloatRange( 0.3, 0.5 )
	if( IsAlive( player ) )
	{
		EmitSoundOnEntity( player, "diag_imc_grunt" + string( RandomIntRange( 1, 6 ) ) + "_bc_killenemygrunt_0" + string( RandomIntRange( 1, 2 ) ) )
	}
	thread DelayedRestoreBattleChatter( uid, 3 )
}

void function PlayFriendlyKilledChatter( entity victim, entity attacker )
{
	int team = victim.GetTeam()
	array<entity> nearbyAllies = GetPlayerArrayEx( "any", TEAM_ANY, TEAM_ANY, victim.GetOrigin(), 250 )
	foreach( entity player in nearbyAllies )
	{
		if( IsValid( player ) )
		{
			if( player.GetTeam() == team )
				thread DelayedFriendlyKilledChatter( player )
		}
	}
}

void function DelayedFriendlyKilledChatter( entity player )
{
	string uid = player.GetUID()
	if( playerChatterTable[uid] )
		return
	wait RandomFloatRange( 0.3, 0.5 )
	if( IsAlive( player ) )
	{
		array<entity> nearbyAllies = GetPlayerArrayEx( "any", player.GetTeam(), TEAM_ANY, player.GetOrigin(), 250 )
		if( nearbyAllies.len() == 0 )
		{
			EmitSoundOnEntity( player, "diag_imc_grunt" + string( RandomIntRange( 1, 6 ) ) + "_bc_squaddeplete" )
			thread DelayedRestoreBattleChatter( uid, 5 )
		}
		else
		{
			EmitSoundOnEntity( player, "diag_imc_grunt" + string( RandomIntRange( 1, 6 ) ) + "_bc_allygruntdown" )
			thread DelayedRestoreBattleChatter( uid, 3 )
		}
	}
}

void function OnPlayerChangeLoadout( entity player , PilotLoadoutDef p)
{	
	BecomesGrunt_Loadout( player )
}

void function BecomesGrunt_Loadout( entity player )
{
	if( IsValid( player ) )
	{
	 	/*string */secondary = player.GetMainWeapons()[1].GetWeaponClassName()
		grenade = player.GetOffhandWeapon(OFFHAND_ORDNANCE).GetWeaponClassName()

		if (grenade == "mp_weapon_thermite_grenade" || grenade == "mp_weapon_grenade_gravity")
		{
			grenade = "mp_weapon_frag_grenade"
		}
		if(secondary == "mp_weapon_defender" || secondary == "mp_weapon_rocket_launcher" || secondary == "mp_weapon_arc_launcher" || secondary == "mp_weapon_mgl")
		{
			secondary = "mp_weapon_semipistol"
		}
		//player.SetPlayerSettings( "civilian_solo" )
		//AddCinematicFlag( player, CE_FLAG_HIDE_MAIN_HUD )
		//player.ForceStand()

		TakeAllWeapons( player )
		
		//player.GiveWeapon( secondary )
		player.GiveOffhandWeapon( grenade, OFFHAND_ORDNANCE, ["grunt_mode"] )
		player.GiveOffhandWeapon( "melee_pilot_emptyhanded", OFFHAND_MELEE, ["grunt_mode"] )

		player.Signal( "ForceStopShield" )
		if( player.GetTeam() == TEAM_MILITIA )
		{
			player.SetModel($"models/humans/grunts/mlt_grunt_lmg.mdl")
			player.SetMaxHealth( 100 )
		}
		if( player.GetTeam() == TEAM_IMC )
		{
			player.SetModel($"models/humans/grunts/imc_grunt_lmg.mdl")
			player.SetMaxHealth( 100 )
		}

		Highlight_SetFriendlyHighlight( player, "fw_friendly" )
		//player.kv.gravity = 1.4
		//HideName( player )
		player.SetNameVisibleToEnemy( false )
	}
}

void function BecomesGrunt_Model( entity player )
{
	if( IsValid(player) )
	{
		bool antiTitanTrue = false
		string antiTitan = "mp_weapon_rocket_launcher"
		string pMods = "Grunt"
		string pModel = "models/humans/grunts/mlt_grunt_rifle.mdl"
		if( player.GetTeam() == TEAM_MILITIA )
		{
			int mltrandom = 1
			if (pRank[player] == 0)
			{
				mltrandom = RandomInt( 5 )
			}
			else if (pRank[player] == 1)
			{
				mltrandom = RandomInt( 6 )
			}
			else  if (pRank[player] == 2)
			{
				mltrandom = RandomInt( 7 )
			}
			else
			{
				mltrandom = RandomInt( 8 )
			}
			//Overrides
			if (rankUpG == 1)
			{
				mltrandom = 5
			}
			else if (rankUpG == 2)
			{
				mltrandom = 6
			}
			else if (rankUpG == 3)
			{
				mltrandom = 7
			}
			switch( mltrandom )
			{
				case 0: //Heavy
					pModel = "models/humans/grunts/mlt_grunt_lmg.mdl"
					SendHudMessage(player, "Respawning as Heavy: Use a Spitfire LMG or Sidewinder and an Archer",  -1, -0.2, 255, 255, 255, 255, 0.15, 6, 1)
					player.GiveWeapon(CHEAVY[ RandomInt( CHEAVY.len() ) ])
					antiTitan = "mp_weapon_rocket_launcher"
					antiTitanTrue = true
					player.SetMaxHealth( 50 )
					break
				case 1: //Rifleman
					pModel = "models/humans/grunts/mlt_grunt_rifle.mdl"
					SendHudMessage(player, "Respawning as Riflemen: Use your given rifle",  -1, -0.2, 255, 255, 255, 255, 0.15, 6, 1)
					player.GiveWeapon(CRIFLE[ RandomInt( CRIFLE.len() ) ])
					player.SetMaxHealth( 50 )
					antiTitanTrue = false
					break
				case 2: //SMG 
					pModel = "models/humans/grunts/mlt_grunt_smg.mdl"
					SendHudMessage(player, "Respawning as Communications: Use your SMG",  -1, -0.2, 255, 255, 255, 255, 0.15, 6, 1)
					player.GiveWeapon(CSMG[ RandomInt( CSMG.len() ) ])
					antiTitanTrue = false
					player.SetMaxHealth( 50 )
					break
				case 3: //Shotgun
					pModel = "models/humans/grunts/mlt_grunt_shotgun.mdl"
					SendHudMessage(player, "Respawning as Support: EVA-8 Shotgun",  -1, -0.2, 255, 255, 255, 255, 0.15, 6, 1)
					player.GiveWeapon( "mp_weapon_shotgun" )
					antiTitanTrue = false
					player.SetMaxHealth( 50 )
					break
				case 4: //Captain
					pModel = "models/humans/grunts/imc_grunt_shield_captain.mdl"
					SendHudMessage(player, "Respawning as Shield Captain: Use a Spitfire LMG with a moving Particle Shield",  -1, -0.2, 255, 255, 255, 255, 0.15, 6, 1)
					player.GiveWeapon( "mp_weapon_lmg" )
					antiTitanTrue = false
					thread ActivatePersonalShield( player )
					player.SetMaxHealth( 80 )
					break
				case 5: //Specialist
					pModel = "models/humans/pilots/pilot_light_ged_m.mdl"
					SendHudMessage(player, "Respawn as Specialist: Spawn 2 drones with special weapons and an MGL",  -1, -0.2, 255, 255, 255, 255, 0.15, 6, 1)
					if( PlayerHasPassive( player, ePassives.PAS_ORDNANCE_PACK ) )
						TakePassive( player, ePassives.PAS_ORDNANCE_PACK )
					player.GiveOffhandWeapon( "mp_weapon_frag_drone", OFFHAND_SPECIAL, ["drone_spawner"] )
					player.GiveWeapon(CSPECIAL[ RandomInt( CSPECIAL.len() ) ])
					antiTitanTrue = true
					antiTitan = "mp_weapon_mgl"
					player.SetMaxHealth( 70 )
					break
				case 6: //Spectre
					pModel = "models/humans/pilots/pilot_light_ged_m.mdl"
					SendHudMessage(player, "Respawn as Spectre: Have extra health and Double Jump with a Volt, at reduced slide speed",  -1, -0.2, 255, 255, 255, 255, 0.15, 6, 1)
					player.GiveWeapon( "mp_weapon_hemlok_smg")
					antiTitanTrue = false
					player.SetMaxHealth( 100 )
					pMods = "Spectre"
					break
				case 7: //Sniper Spectre
					pModel = "models/humans/pilots/pilot_light_ged_m.mdl" //Workaround for rodeo/dropship
					SendHudMessage(player, "Respawn as Sniper Spectre: Spectre stats with a Kraber or Doubletake and a charge rifle",  -1, -0.2, 255, 255, 255, 255, 0.15, 6, 1)
					player.GiveWeapon( CSNIPER[ RandomInt( CSNIPER.len() ) ] )
					antiTitanTrue = true
					antiTitan = "mp_weapon_defender"
					player.SetMaxHealth( 100 )
					pMods = "Spectre"
					break
				default:
					break
			}	
		}

		if( player.GetTeam() == TEAM_IMC )
		{
			int imcrandom = 1
			if (pRank[player] == 0)
			{
				imcrandom = RandomInt( 5 )
			}
			else if (pRank[player] == 1)
			{
				imcrandom = RandomInt( 6 )
			}
			else  if (pRank[player] == 2)
			{
				imcrandom = RandomInt( 7 )
			}
			else
			{
				imcrandom = RandomInt( 8 )
			}
			//Overrides
			if (rankUpG == 1)
			{
				imcrandom = 5
			}
			else if (rankUpG == 2)
			{
				imcrandom = 6
			}
			else if (rankUpG == 3)
			{
				imcrandom = 7
			}
			switch( imcrandom )
			{
				case 0: //Heavy
					pModel = "models/humans/grunts/imc_grunt_lmg.mdl"
					SendHudMessage(player, "Respawning as Heavy: Use a Spitfire LMG or Sidewinder and an Archer",  -1, -0.2, 255, 255, 255, 255, 0.15, 6, 1)
					player.GiveWeapon(CHEAVY[ RandomInt( CHEAVY.len() ) ])
					antiTitan = "mp_weapon_rocket_launcher"
					antiTitanTrue = true
					player.SetMaxHealth( 50 )
					break
				case 1: //Rifleman
					pModel = "models/humans/grunts/imc_grunt_rifle.mdl"
					SendHudMessage(player, "Respawning as Riflemen: Use your given rifle",  -1, -0.2, 255, 255, 255, 255, 0.15, 6, 1)
					player.GiveWeapon(CRIFLE[ RandomInt( CRIFLE.len() ) ])
					player.SetMaxHealth( 50 )
					antiTitanTrue = false
					break
				case 2: //SMG 
					pModel = "models/humans/grunts/imc_grunt_smg.mdl"
					SendHudMessage(player, "Respawning as Communications: Use your SMG",  -1, -0.2, 255, 255, 255, 255, 0.15, 6, 1)
					player.GiveWeapon(CSMG[ RandomInt( CSMG.len() ) ])
					antiTitanTrue = false
					player.SetMaxHealth( 50 )
					break
				case 3: //Shotgun
					pModel = "models/humans/grunts/imc_grunt_shotgun.mdl"
					SendHudMessage(player, "Respawning as Support: EVA-8 Shotgun",  -1, -0.2, 255, 255, 255, 255, 0.15, 6, 1)
					player.GiveWeapon( "mp_weapon_shotgun" )
					antiTitanTrue = false
					player.SetMaxHealth( 50 )
					break
				case 4: //Captain
					pModel = "models/humans/grunts/imc_grunt_shield_captain.mdl"
					SendHudMessage(player, "Respawning as Shield Captain: Use a Spitfire LMG with a moving Particle Shield",  -1, -0.2, 255, 255, 255, 255, 0.15, 6, 1)
					player.GiveWeapon( "mp_weapon_lmg" )
					antiTitanTrue = false
					thread ActivatePersonalShield( player )
					player.SetMaxHealth( 80 )
					break
				case 5: //Specialist
					pModel = "models/humans/pilots/pilot_light_ged_m.mdl"
					SendHudMessage(player, "Respawn as Specialist: Spawn 2 drones with special weapons and an MGL",  -1, -0.2, 255, 255, 255, 255, 0.15, 6, 1)
					if( PlayerHasPassive( player, ePassives.PAS_ORDNANCE_PACK ) )
						TakePassive( player, ePassives.PAS_ORDNANCE_PACK )
					player.GiveOffhandWeapon( "mp_weapon_frag_drone", OFFHAND_SPECIAL, ["drone_spawner"] )
					player.GiveWeapon(CSPECIAL[ RandomInt( CSPECIAL.len() ) ])
					antiTitanTrue = true
					antiTitan = "mp_weapon_mgl"
					player.SetMaxHealth( 70 )
					break
				case 6: //Spectre
					pModel = "models/humans/pilots/pilot_light_ged_m.mdl" //Cannot currently use spectre model for rodeo/dropship, this is workaround
					SendHudMessage(player, "Respawn as Spectre: Have extra health and Double Jump with a Volt, at reduced slide speed",  -1, -0.2, 255, 255, 255, 255, 0.15, 6, 1)
					player.GiveWeapon( "mp_weapon_hemlok_smg")
					antiTitanTrue = false
					player.SetMaxHealth( 100 )
					pMods = "Spectre"
					break
				case 7: //Sniper Spectre
					pModel = "models/humans/pilots/pilot_light_ged_m.mdl"
					SendHudMessage(player, "Respawn as Sniper Spectre: Spectre stats with a Kraber or Doubletake and a charge rifle",  -1, -0.2, 255, 255, 255, 255, 0.15, 6, 1)
					player.GiveWeapon( CSNIPER[ RandomInt( CSNIPER.len() ) ] )
					antiTitanTrue = true
					antiTitan = "mp_weapon_defender"
					player.SetMaxHealth( 100 )
					pMods = "Spectre"
					break
				default:
					break
			}
		}
		player.GiveWeapon( secondary )
		if (antiTitanTrue == true)
		{
			player.GiveWeapon( antiTitan )
		}
		if (pMods == "Spectre")
		{
			player.SetPlayerSettingsWithMods( player.GetPlayerSettings(), ["enable_double", "disable_wallrun", "spectre_speedmod"])
		}
		else
		{
			player.SetPlayerSettingsWithMods( player.GetPlayerSettings(), ["disable_doublejump", "disable_wallrun", "less_powerful_gilde"])
		}
		if (pModel == "models/humans/pilots/pilot_light_ged_m.mdl") //another workaround the the fuckin workaround
		{
			player.SetModel( $"models/humans/pilots/pilot_light_ged_m.mdl") //Workaround because one day it decided not to work normally for no given reason whatsoever
		}
		else if (pModel == "models/humans/grunts/imc_grunt_shield_captain.mdl")
		{
			player.SetModel( $"models/humans/grunts/imc_grunt_shield_captain.mdl")
		} //MLT
		else if (pModel == "models/humans/grunts/mlt_grunt_shotgun.mdl")
		{
			player.SetModel( $"models/humans/grunts/mlt_grunt_shotgun.mdl")
		}
		else if (pModel == "models/humans/grunts/mlt_grunt_rifle.mdl")
		{
			player.SetModel( $"models/humans/grunts/mlt_rifle.mdl")
		}
		else if (pModel == "models/humans/grunts/mlt_grunt_shotgun.mdl")
		{
			player.SetModel( $"models/humans/grunts/mlt_grunt_shotgun.mdl")
		}
		else if (pModel == "models/humans/grunts/mlt_grunt_smg.mdl")
		{
			player.SetModel( $"models/humans/grunts/mlt_grunt_smg.mdl")
		}
		else if (pModel == "models/humans/grunts/mlt_grunt_lmg.mdl")
		{
			player.SetModel( $"models/humans/grunts/mlt_grunt_lmg.mdl")
		} //IMC
		else if (pModel == "models/humans/grunts/imc_grunt_shotgun.mdl")
		{
			player.SetModel( $"models/humans/grunts/imc_grunt_shotgun.mdl")
		}
		else if (pModel == "models/humans/grunts/imc_grunt_rifle.mdl")
		{
			player.SetModel( $"models/humans/grunts/imc_rifle.mdl")
		}
		else if (pModel == "models/humans/grunts/imc_grunt_shotgun.mdl")
		{
			player.SetModel( $"models/humans/grunts/imc_grunt_shotgun.mdl")
		}
		else if (pModel == "models/humans/grunts/imc_grunt_smg.mdl")
		{
			player.SetModel( $"models/humans/grunts/imc_grunt_smg.mdl")
		}
		else if (pModel == "models/humans/grunts/imc_grunt_lmg.mdl")
		{
			player.SetModel( $"models/humans/grunts/imc_grunt_lmg.mdl")
		}
	}
}
