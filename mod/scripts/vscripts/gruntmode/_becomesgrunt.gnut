untyped

global function BecomesGruntMode_Init

table< string, bool > playerChatterTable
array<string> GRUNT_CHATTERS = [ "diag_sp_intro_WD104_24_01_mcor_grunt1", "diag_sp_intro_WD103_02_01_mcor_grunt2", "diag_sp_intro_WD104_26_01_mcor_grunt3"]
array<string> SPECTRE_CHATTERS = [ "diag_spectre_gs_leechstart_01_1", "diag_spectre_gs_leechend_01_1", "diag_spectre_gs_leechaborted_01_1","diag_spectre_gs_grenadeout_01_1"]
//"diag_sp_intro_WD103_02_01_mcor_grunt2" Backup! Backup!
//"diag_sp_intro_WD104_26_01_mcor_grunt3" We can't stay here, move, move!
//"diag_sp_ReaperTown_BM103_01a_01_mcor_grunt2" Look, a pilot! now they're doing our favor
//"diag_sp_intro_WD104_24_01_mcor_grunt1" They're trying to corner us!

//Randomized loadouts minus anti-titan weapons, which are seperate
global array<string> CRIFLE = [ "mp_weapon_rspn101", "mp_weapon_rspn101_og", "mp_weapon_vinson", "mp_weapon_hemlok" ]
global array<string> CHEAVY = [ "mp_weapon_lmg", "mp_weapon_smr" ] //Also uses archer but excluded
global array<string> CSMG = ["mp_weapon_r97", "mp_weapon_alternator_smg", "mp_weapon_car"] //Original was just R97, but the others were added because MP grunts have them
global array<string> CSPECIAL = [ "mp_weapon_hemlok_smg", "mp_weapon_mastiff" ] //Also uses mag launcher but excluded
global array<string> CSNIPER = [ "mp_weapon_doubletake", "mp_weapon_sniper" ] //Also uses charge rifle but excluded

// SETTINGS
//--------------------------------------------------------------
int maxClasses = 14 //Number of pickable classes starting from 0 (Number of cases)

//-------------------------------------------------------------

//Player tables
global table<entity, bool> hasSpawned
global table<entity, bool> hasChanged
global table<entity, int> pRank
global table<entity, int> shownClass
global table<entity, int> selectedClass
global table<entity, int> givenScore
global table<entity, int> usedScore
global table<entity, int> currentClass //Currrent in-game class (by integer)
global table<entity, int> markScore //marksman kills for unlocking new classes
global table<entity, bool> deathDelay // True = Can use WASD inputs
global table<entity, int> specialistDrones
global table<entity, int> gruntScore
global table<entity, int> rifleStreak
global table<entity, int> hemlokPoints

global table<entity, int> classscore0
global table<entity, int> classscore1
global table<entity, int> classscore2
global table<entity, int> classscore3
global table<entity, int> classscore4
global table<entity, int> classscore5
global table<entity, int> classscore6
global table<entity, int> classscore7
global table<entity, int> classscore8
global table<entity, int> classscore9
global table<entity, int> classscore10
global table<entity, int> classscore11
global table<entity, int> classscore12
// Pilot and non-upgrade classes don't need scores
global table<entity, int> classscore15

global table<entity, PilotLoadoutDef> playerLoadout
int score = 0

void function BecomesGruntMode_Init()
{
	isGruntMode = true

	if ( GetConVarString( "HEMLOK_ENABLED" ) == "true" ) { // If Hemlok Rifleman is enabled
		maxClasses = 15
	}

	if ( GetConVarString( "CUSTOM_GRUNT_SPAWNING" ) == "true" ) {
		gruntSpawnoverride = true
	}
	if ( !gruntSupportedGameMode ) {
		Gruntmode_Init()
	}
	SetLoadoutGracePeriodEnabled( false )
	PrecacheModel( $"models/humans/grunts/imc_grunt_shield_captain.mdl" )

	AddCallback_OnClientConnected( OnClientConnected )
	AddCallback_OnPlayerRespawned( OnPlayerRespawned )
	AddCallback_OnPlayerGetsNewPilotLoadout( OnPlayerChangeLoadout )
	AddCallback_OnPlayerKilled( StartKillerOutline )
	AddCallback_OnPlayerKilled( DropGrenade )
	AddCallback_OnPlayerKilled( OnGruntKilled )
	AddCallback_OnPlayerKilled( LoadoutScreen )
	AddCallback_OnNPCKilled( DropNPCGrenade )

	AddSpawnCallback( "npc_soldier", PilotConfig )
	AddSpawnCallback( "npc_marvin", MarvinConfig )
	AddSpawnCallback( "npc_prowler", ProwlerConfig )
	AddSpawnCallback( "npc_spectre", SpectreConfig )
	AddSpawnCallback( "npc_stalker", StalkerConfig )
	AddSpawnCallback( "npc_super_spectre", ReaperConfig )
	AddSpawnCallback( "npc_titan", TitanConfig )
	//AddSpawnCallback( "npc_drone", DroneConfig )
	AddSpawnCallback( "npc_gunship", GunshipConfig )
	AddSpawnCallback( "npc_dropship", DropshipConfig )
}

//-----------------------------------------------

void function PilotConfig( entity soldier ) // All AI soldiers
{
	if( IsValid( soldier ) )
	{
		soldier.SetMaxHealth( 100 )
		soldier.SetHealth( 100 )
		Highlight_SetFriendlyHighlight( soldier, "friendly_ai" )
		soldier.SetNameVisibleToEnemy( false )
	}
	if ( soldier.GetModelName() == $"models/humans/pilots/sp_medium_reaper_m.mdl" ) // MIL Pilot
	{
		soldier.SetMaxHealth( 250 )
		soldier.SetHealth( 250 )
	}
	if ( soldier.GetModelName() == $"models/humans/pilots/sp_medium_stalker_m.mdl" ) // IMC Pilot
	{
		soldier.SetMaxHealth( 250 )
		soldier.SetHealth( 250 )
	}
}

void function MarvinConfig( entity soldier )
{
	if( IsValid( soldier ) )
	{
		soldier.SetMaxHealth( 50 )
		soldier.SetHealth( 50 )
		Highlight_SetFriendlyHighlight( soldier, "friendly_ai" )
		soldier.SetNameVisibleToEnemy( false )
	}
}

void function ProwlerConfig( entity soldier )
{
	if( IsValid( soldier ) )
	{
		Highlight_SetFriendlyHighlight( soldier, "friendly_ai" )
		soldier.SetNameVisibleToEnemy( false )
	}
}

void function SpectreConfig( entity soldier )
{
	if( IsValid( soldier ) )
	{
		soldier.SetMaxHealth( 200 )
		soldier.SetHealth( 200 )
		Highlight_SetFriendlyHighlight( soldier, "friendly_ai" )
		soldier.SetNameVisibleToEnemy( false )
	}
}

void function StalkerConfig( entity soldier )
{
	if( IsValid( soldier ) )
	{
		soldier.SetMaxHealth( 250 )
		soldier.SetHealth( 250 )
		Highlight_SetFriendlyHighlight( soldier, "friendly_ai" )
		soldier.SetNameVisibleToEnemy( false )
	}
}

void function ReaperConfig( entity soldier )
{
	if( IsValid( soldier ) )
	{
		Highlight_SetFriendlyHighlight( soldier, "fw_friendly" )
	}
}

void function TitanConfig( entity soldier )
{
	if( IsValid( soldier ) )
	{
		Highlight_SetFriendlyHighlight( soldier, "fw_friendly" )
	}
}

void function DroneConfig( entity soldier )
{
	if( IsValid( soldier ) )
	{
		soldier.SetMaxHealth( 170 )
		soldier.SetHealth( 170 )
		Highlight_SetFriendlyHighlight( soldier, "friendly_ai" )
		soldier.SetNameVisibleToEnemy( false )
	}
}

void function GunshipConfig( entity soldier )
{
	if( IsValid( soldier ) )
	{
		Highlight_SetFriendlyHighlight( soldier, "friendly_ai" )
	}
}

void function DropshipConfig( entity soldier )
{
	if( IsValid( soldier ) )
	{
		soldier.SetMaxHealth( 7800 )
		soldier.SetHealth( 7800 )
		Highlight_SetFriendlyHighlight( soldier, "fw_friendly_titan" )
	}
}

void function setClassScores( entity player )
{
	classscore0[player] <- 0
	classscore1[player] <- 0
	classscore2[player] <- 0
	classscore3[player] <- 0
	classscore4[player] <- 0
	classscore5[player] <- 0
	classscore6[player] <- 0
	classscore7[player] <- 0
	classscore8[player] <- 0
	classscore9[player] <- 0
	classscore10[player] <- 0
	classscore11[player] <- 0
	classscore12[player] <- 0
	classscore15[player] <- 0
}
void function OnClientConnected( entity player )
{
	hasSpawned[player] <- false
	hasChanged[player] <- false
	pRank[player] <- 0
	shownClass[player] <- 0
	selectedClass[player] <- 0
	usedScore[player] <- 0
	givenScore[player] <- 0
	deathDelay[player] <- false
	specialistDrones[player] <- 0
	currentClass[player] <- 0
	rifleStreak[player] <- 0
	gruntScore[player] <- 0
	hemlokPoints[player] <- 0
	setClassScores(player)


	playerChatterTable[player.GetUID()] <- false
	AddPlayerHeldButtonEventCallback( player, IN_USE, CallbackFuncCornerUs, 0.3 )
	AddButtonPressedPlayerInputCallback( player, IN_USE, CallbackFuncSpotEnemy )
	AddButtonPressedPlayerInputCallback( player, IN_WEAPON_CYCLE, SwitchClassesInput)
	AddButtonPressedPlayerInputCallback( player, IN_OFFHAND0, SwitchClassesInput)
	AddButtonPressedPlayerInputCallback( player, IN_OFFHAND1, SwitchClassesInputBack)
	AddButtonPressedPlayerInputCallback( player, IN_MOVERIGHT, SwitchClassesInputDelayed)
	AddButtonPressedPlayerInputCallback( player, IN_MOVELEFT, SwitchClassesInputBackDelayed)
	AddButtonPressedPlayerInputCallback( player, IN_FORWARD, SwitchClassesInputBackDelayed)
	AddButtonPressedPlayerInputCallback( player, IN_BACK, SwitchClassesInputDelayed)
}

void function SwitchClassesInputDelayed( entity player )
{
	if (deathDelay[player] == true)
	{
		thread SwitchClasses( player )
	}
}

void function SwitchClassesInputBackDelayed( entity player )
{
	if (deathDelay[player] == true)
	{
		thread SwitchClassesBack( player )
	}
}
void function SwitchClassesInputBack( entity player )
{
	thread SwitchClassesBack( player )
}

void function SwitchClassesBack( entity player )
{
	if (!IsAlive( player ))
	{
		shownClass[player] -= 1
		if (shownClass[player] == -1)
		{
			shownClass[player] <- maxClasses
		}
		int score = calculateScore( player )
		UpdateCycle( player, shownClass[player], selectedClass[player], score)
	}
}

void function SwitchClassesInput( entity player ) //Allow user to switch classes
{
	thread SwitchClasses( player )
}

void function SwitchClasses( entity player )
{
	if (!IsAlive( player ))
	{
		shownClass[player] += 1
		if (shownClass[player] == maxClasses+1 )
		{
			shownClass[player] <- 0
		}
		int score = calculateScore( player )
		UpdateCycle( player, shownClass[player], selectedClass[player], score)
	}
}


void function LoadoutScreen( entity player, entity attacker, var damageInfo ) //Happens on player killed
{
	int score = calculateScore( player )
	print("Player Score:")
	print(score)
	int selected = selectedClass[player]
	shownClass[player] = selected
	int shown = selected
	ShowCycle(player,shown,selected, score)
	if (!hasChanged[player])
	{
		thread sendCycleInfo( player )
	}
	sendScoreInfo( player )
}

void function UpdateCycle( entity player, int shown, int selected, int score)
{

	sendClassMessage( player, shown)
	if (!hasChanged[player])
	{
		hasChanged[player] = true
	}
	string title1 = ""
	string title2 = ""
	string title3 = ""
	string title4 = ""
	int classScore = 0
	string selectString = "[#]"
	string str1 = expect string(determineClass( shown, player ))
	classScore = expect int(determineClassScore( shown ))
	if ( str1.find("[") == null ) //string does not contain "["
	{
		if (classScore > score )
		{
			title1 = "[$" + score + "/" + classScore + "] "
			selectString = "[$]"
		}
	} else {
		selectString = "[!]"
	}
	shown = expect int(increaseShown( shown ))
	string str2 = expect string(determineClass( shown, player ))
	classScore = expect int(determineClassScore( shown ))
	if ( str2.find("[") == null )
	{
		if (classScore > score )
		{
			title2 = "[$" + score + "/" + classScore + "] "
		}
	}
	shown = expect int(increaseShown( shown ))
	string str3 = expect string(determineClass( shown, player ))
	classScore = expect int(determineClassScore( shown ))
	if ( str3.find("[") == null )
	{
		if (classScore > score)
		{
			title3 = "[$" + score + "/" + classScore + "] "
		}
	}
	shown = expect int(increaseShown( shown ))
	string str4 = expect string(determineClass( shown, player ))
	classScore = expect int(determineClassScore( shown ))
	if ( str4.find("[") == null )
	{
		if (classScore > score)
		{
			title4 = "[$" + score + "/" + classScore + "] "
		}
	}
	if (title1 == "" && str1.find("[") == null )
	{
		selectedClass[player] = shownClass[player]
	}
	else
	{
		selectedClass[player] = 0
	}
	NSEditStatusMessageOnPlayer(player, selectString, title1 + str1, "status1")
	NSEditStatusMessageOnPlayer(player,"",title2 + str2, "status2")
	NSEditStatusMessageOnPlayer(player,"",title3 + str3, "status3")
	NSEditStatusMessageOnPlayer(player,"",title4 + str4, "status4")
}

void function ShowCycle( entity player, int shown, int selected, int score)
{
	sendClassMessage( player, shown)
	string title1 = ""
	string title2 = ""
	string title3 = ""
	string title4 = ""
	int classScore = 0
	string str1 = expect string(determineClass( shown, player ))
	classScore = expect int(determineClassScore( shown ))
	if ( str1.find("[") == null ) //string does not contain "["
	{
		if (classScore > score )
		{
			title1 = "[$" + score + "/" + classScore + "] "
		}
	}
	shown = expect int(increaseShown( shown ))
	string str2 = expect string(determineClass( shown, player ))
	classScore = expect int(determineClassScore( shown ))
	if ( str2.find("[") == null )
	{
		if (classScore > score )
		{
			title2 = "[$" + score + "/" + classScore + "] "
		}
	}
	shown = expect int(increaseShown( shown ))
	string str3 = expect string(determineClass( shown, player ))
	classScore = expect int(determineClassScore( shown ))
	if ( str3.find("[") == null )
	{
		if (classScore > score)
		{
			title3 = "[$" + score + "/" + classScore + "] "
		}
	}
	shown = expect int(increaseShown( shown ))
	string str4 = expect string(determineClass( shown, player ))
	classScore = expect int(determineClassScore( shown ))
	if ( str4.find("[") == null )
	{
		if (classScore > score)
		{
			title4 = "[$" + score + "/" + classScore + "] "
		}
	}
	if (title1 == "" && str1.find("[") == null )
	{
		selectedClass[player] = shownClass[player]
	}
	else
	{
		selectedClass[player] = 0
	}
	NSCreateStatusMessageOnPlayer(player, "[#]",title1 + str1, "status1")
	NSCreateStatusMessageOnPlayer(player,"",title2 + str2, "status2")
	NSCreateStatusMessageOnPlayer(player,"",title3 + str3, "status3")
	NSCreateStatusMessageOnPlayer(player,"",title4 + str4, "status4")

}

string function opPilotText()
{
	string classType = " AS A GRUNT"
	if ( GetConVarString( "CLASS_OPPILOT_UNLOCK_TYPE" ) == "rifle")
	{
		classType = " AS A RIFLEMAN"
	}
	else if ( GetConVarString( "CLASS_OPPILOT_UNLOCK_TYPE" ) == "free")
	{
		classType = " AS A FREE GRUNT CLASS"
	}
	else if ( GetConVarString( "CLASS_OPPILOT_UNLOCK_TYPE" ) == "any")
	{
		classType = " "
	}
	return classType
}

void function sendClassMessage( entity player, int classNum )
{
	int score = calculateScore( player )
	string scoreText = "You have " + score + " points to spend \n"
	string sentText = ""

	table< entity, int > cClassScore = classscore0
	switch( classNum )
	{
		case 0:
			cClassScore = classscore0
			break
		case 1:
			cClassScore = classscore1
			break
		case 2:
			cClassScore = classscore2
			break
		case 3:
			cClassScore = classscore3
			break
		case 4:
			cClassScore = classscore4
			break
		case 5:
			cClassScore = classscore5
			break
		case 6:
			cClassScore = classscore6
			break
		case 7:
			cClassScore = classscore7
			break
		case 8:
			cClassScore = classscore8
			break
		case 9:
			cClassScore = classscore9
			break
		case 10:
			cClassScore = classscore10
			break
		case 11:
			cClassScore = classscore11
			break
		case 12:
			cClassScore = classscore12
			break
		case 15:
			cClassScore = classscore15
	}
	string cScoreText = "You have " + cClassScore[player] + " points with this class\n"

	switch( classNum )
	{
		case 0:
			sentText = "Rifleman\nHealth: 100\nPrimary: R201, R101, Flatline, and Hemlok\nUpgrades: HCOG -> Fast Reload\nPistol: P2016\nAnti-Titan: None\nOrdinance: Frag Grenade\nAbilities: None"
			break
		case 1:
			sentText = "Communications\nHealth: 100\nPrimary: R97, CAR, Alternator\nUpgrades: Holosight/HCOG -> Gunrunner\nPistol: P2016\nAnti-Titan: None\nOrdinance: Frag Grenade\nAbilities: None"
			break
		case 2:
			sentText = "Support\nHealth: 100\nPrimary: EVA-8 Auto\nUpgrades: Extended Mag -> Fast Swap\nPistol: P2016\nAnti-Titan: None\nOrdinance: Frag Grenade\nAbilities: None"
			break
		case 3:
			sentText = "Marksman\nHealth: 100\nPrimary: G2A5\nPossible Mods: HCOG Ranger\nPistol: P2016\nAnti-Titan: None\nOrdinace: Frag Grenade\nAbilities: None"
			break
		case 4:
			if ( classscore3[player] >= GetConVarInt( "CLASS_SNIPER_UNLOCK" ) )
			{
				sentText = "Sniper\nHealth: 100\nPrimary: DMR\nUpgrades: Zoom Optic -> Extended Mag\nPistol: P2016\nAnti-Titan: Archer\nOrdinace: Frag Grenade\nAbilities: None"
			}
			else
			{
				int pointsLeft = GetConVarInt( "CLASS_SNIPER_UNLOCK" ) - classscore3[player]
				sentText = "[GET " + pointsLeft + " POINTS AS A MARKSMAN]"
			}
			break
		case 5:
			sentText = "Heavy\nHealth: 100\nPrimary: Spitfire, SMR\nUpgrades: HCOG Ranger -> Fast Reload\nPistol: Wingman\nAnti-Titan: Archer\nOrdinance: Satchel\nAbilities: None"
			break
		case 6:
			sentText = "Shield Captain\nHealth: 150\nPrimary: Spitfire\nUpgrades: HCOG Ranger -> Extended Mag\nPistol: Wingman\nAnti-Titan: None\nOrdinance: Electric Smoke Grenade\nAbilities: Personal Shield"
			break
		case 7:
			sentText = "Specialist\nHealth: 125\nPrimary: Volt, Mastiff\nUpgrades: Quickswap -> Fast Reload\nPistol: Mozambique\nAnti-Titan: MGL\nOrdinance: Arc Grenade\nAbilities: Plasma Drone and Beam Drone (Regenerating)"
			break
		case 8:
			if ( gruntScore[player] >= GetConVarInt( "CLASS_SPECTRE_UNLOCK" ) )
			{
				sentText = "Spectre\nHealth: 130\nPrimary: Volt\nUpgrades: Holosight -> Fast Reload\nPistol: P2016\nAnti-Titan: None\nOrdinance: Arc Grenade\nAbilities: Double Jump, Reduced Slide"
			}
			else
			{
				int pointsLeft = GetConVarInt( "CLASS_SPECTRE_UNLOCK" ) - gruntScore[player]
				sentText = "[GET " + pointsLeft + " POINTS AS A GRUNT]"
			}
			break
		case 9:
			if ( classscore12[player] >= GetConVarInt( "CLASS_BLASTSPECTRE_UNLOCK" ) )
			{
				sentText = "Blast Spectre\nHealth: 150\nPrimary: L-Star\nUpgrades: Threat Scope\nPistol: Wingman\nAnti-Titan: None\nOrdinance: Arc Grenade\nAbilities: Self Destruct, No Slide, Delayed Health Regeneration"
			}
			else
			{
				int pointsLeft = GetConVarInt( "CLASS_BLASTSPECTRE_UNLOCK" ) - classscore12[player]
				sentText = "[GET " + pointsLeft + " POINTS AS A SPECTRE LEADER]"
			}
			break
		case 10:
			if ( classscore8[player] >= GetConVarInt( "CLASS_SNIPESPECTRE_UNLOCK" ) )
			{
				sentText = "Sniper Spectre\nHealth: 130\nPrimary: Kraber, DoubleTake\nUpgrades: Quickscope -> Amped Weapons\nPistol: P2016\nAnti-Titan: Charge Rifle\nOrdinance: Arc Grenade\nAbilities: Double Jump, Reduced Slide"
			}
			else
			{
				int pointsLeft = GetConVarInt( "CLASS_SNIPESPECTRE_UNLOCK" ) - classscore8[player]
				sentText = "[GET " + pointsLeft +" POINTS AS A SPECTRE]"
			}
			break
		case 11:
			if ( specialistDrones[player] >= GetConVarInt( "CLASS_SENTRY_UNLOCK" ) )
			{
				sentText = "Sentry Technician\nHealth: 125\nPrimary: EM-4 Cold War\nUpgrades: Extended Ammo -> Fast Reload\nPistol: RE-45 Auto\nAnti-Titan: None\nOrdinance: Electric Smoke Grenade\nAbilities: 2 Deployable Sentry Turrets (Regenerating)"
			}
			else
			{
				int pointsLeft = GetConVarInt( "CLASS_SENTRY_UNLOCK" ) - specialistDrones[player]
				sentText = "[SPAWN " + pointsLeft +" DRONES AS A SPECIALIST]"
			}
			break
		case 12:
			if (  classscore8[player] + classscore10[player] >= GetConVarInt( "CLASS_SPECTRELEADER_UNLOCK" ) )
			{
				sentText = "Spectre Leader\nHealth: 150\nPrimary: Devotion\nUpgrades: Threat Scope -> Extended Mag\nPistol: P2016\nAnti-Titan: Thunderbolt\nOrdinance: Arc Grenade (regenerating)\nAbilities: Double Jump, Reduced Slide"
			}
			else
			{
				int pointsLeft = GetConVarInt( "CLASS_SPECTRELEADER_UNLOCK" ) - (classscore8[player] + classscore10[player])
				sentText = "[GET " + pointsLeft + " POINTS WITH A SPECTRE CLASS]"
			}
			break
		case 13:
			if ( gruntScore[player] >= GetConVarInt( "CLASS_PILOT_UNLOCK" ) )
			{
				sentText = "Pilot\nHealth: 150\nPrimary: Amped R101 with HCOG and Tackill\nPistol: RE-45 Auto with Quickscope\nAnti-Titan: Thunderbolt (infinite ammo)\nOrdinance: 2 Frag Grenades (regenerating)\nAbilities: Regenerating Cloak, Double Jump, Wallrun, Kunai, Personal Dropship"
			}
			else
			{
				int pointsLeft = GetConVarInt( "CLASS_PILOT_UNLOCK" ) - gruntScore[player]
				sentText = "[GET " + pointsLeft + " POINTS AS A GRUNT]"
			}
			break
		case 14:
			if ( rifleStreak[player] >= GetConVarInt( "CLASS_OPPILOT_UNLOCK_STREAK" ) )
			{
				sentText = "Pilot\nHealth: 150\nPrimary: Amped R101 with HCOG, Extended Ammo, and TacKill\nPistol: Smart Pistol Auto with Extended Ammo, Gunrunner, and TacKill\nAnti-Titan: Amped Thunderbolt with Infinite Ammo and Fast Reload\nAbilities: Gravity Star, Pulse Blade, Holopilot, Stim \nOther Abilities: Double Jump, Wallrun, Kunai, Personal Dropship"
			}
			else
			{
				string classType = opPilotText()
				sentText = "[GET A " + GetConVarInt( "CLASS_OPPILOT_UNLOCK_STREAK" ) +" KILLSTREAK" + classType + "]"
			}
			break
		case 15:
			if ( hemlokPoints[player] >= GetConVarInt( "CLASS_HEMLOK_UNLOCK" ) )
			{
				sentText = "S2ymi's Hemlok Rifleman\nHealth: 125\nPrimary: Hemlok Rifle\nUpgrades: HCOG -> Extended Ammo -> Quickscope -> Amped Weapons\nPistol: Modified Hemlok SMG (Volt)\nAnti-Titan: Armor-Piercing Hemlok\nOrdinance: Frag Grenade\nAbilities: None"
			}
			else
			{
				int pointsLeft = GetConVarInt( "CLASS_HEMLOK_UNLOCK" ) - hemlokPoints[player]
				sentText = "[GET " + pointsLeft + " POINTS WITH A HEMLOK RIFLE]"
			}
			break
		default:
			sentText = "[ERROR]"
			print("Invalid Classnumber to return sentText, recieved " + string(classNum))
			break
	}
	//SendHudMessage(player, "message", x-pos, y-pos, r, g, b, opacity (alpha), fade-in-time, hold-time, fade-out-time)
	SendHudMessage(player, scoreText + cScoreText + sentText,  2, -0.4, 255, 255, 255, 255, 0.15, 100, 0.3)
}

void function clearClassMessage( entity player )
{
	SendHudMessage(player, "",  -1, 0.3, 255, 255, 255, 255, 0.1, 0.1, 0.1)
}
void function ClearCycle( entity player )
{
	NSDeleteStatusMessageOnPlayer(player, "status1")
	NSDeleteStatusMessageOnPlayer(player, "status2")
	NSDeleteStatusMessageOnPlayer(player, "status3")
	NSDeleteStatusMessageOnPlayer(player, "status4")
}

function increaseShown( int shown)
{
	shown++
	if (shown == maxClasses+1)
	{
		shown = 0
	}
	return shown
}

function determineClass( int classNum, entity player )
{
	string returnClass = "Error"
	switch (classNum) {
		case 0:
			returnClass = "Rifleman";
			break;
		case 1:
			returnClass = "Communications";
			break;
		case 2:
			returnClass = "Support";
			break;
		case 3:
			returnClass = "Marksman - " + GetConVarInt("COST_MARKSMAN") + " points";
			break;
		case 4:
			if (classscore3[player] >= GetConVarInt("CLASS_SNIPER_UNLOCK")) {
				returnClass = "Sniper - " + GetConVarInt("COST_SNIPER") + " points";
			}
			else {
				int pointsLeft = GetConVarInt( "CLASS_SNIPER_UNLOCK" ) - classscore3[player]
				returnClass = "[GET " + pointsLeft + " POINTS AS A MARKSMAN]";
			}
			break;
		case 5:
			returnClass = "Heavy - " + GetConVarInt("COST_HEAVY") + " points";
			break;
		case 6:
			returnClass = "Shield Captain - " + GetConVarInt("COST_SHIELD_CAPTAIN") + " points";
			break;
		case 7:
			returnClass = "Specialist - " + GetConVarInt("COST_SPECIALIST") + " points";
			break;
		case 8:
			if (gruntScore[player] >= GetConVarInt("CLASS_SPECTRE_UNLOCK")) {
				returnClass = "Spectre - " + GetConVarInt("COST_SPECTRE") + " points";
			}
			else {
				int pointsLeft = GetConVarInt( "CLASS_SPECTRE_UNLOCK" ) - gruntScore[player]
				returnClass = "[GET " + pointsLeft + " POINTS AS A GRUNT]"
			}
			break;
		case 9:
			if (classscore12[player] >= GetConVarInt("CLASS_BLASTSPECTRE_UNLOCK")) {
				returnClass = "Blast Spectre - " + GetConVarInt("COST_BLAST_SPECTRE") + " points";
			}
			else {
				int pointsLeft = GetConVarInt( "CLASS_BLASTSPECTRE_UNLOCK" ) - classscore12[player]
				returnClass = "[GET " + pointsLeft + " POINTS AS A SPECTRE LEADER]"
			}
			break;
		case 10:
			if (classscore8[player] >= GetConVarInt("CLASS_SNIPESPECTRE_UNLOCK")) {
				returnClass = "Sniper Spectre - " + GetConVarInt("COST_SNIPESPECTRE") + " points";
			}
			else {
				int pointsLeft = GetConVarInt( "CLASS_SNIPESPECTRE_UNLOCK" ) - classscore8[player]
				returnClass = "[GET " + pointsLeft +" POINTS AS A SPECTRE]"
			}
			break;
		case 11:
			if (specialistDrones[player] >= GetConVarInt("CLASS_SENTRY_UNLOCK")) {
				returnClass = "Sentry Technician - " + GetConVarInt("COST_SENTRY") + " points";
			}
			else {
				int pointsLeft = GetConVarInt( "CLASS_SENTRY_UNLOCK" ) - specialistDrones[player]
				returnClass = "[SPAWN " + pointsLeft +" DRONES AS A SPECIALIST]"
			}
			break;
		case 12:
			if (classscore8[player] + classscore10[player] >= GetConVarInt("CLASS_SPECTRELEADER_UNLOCK")) {
				returnClass = "Spectre Leader - " + GetConVarInt("COST_SPECTRE_LEADER") + " points";
			}
			else {
				int pointsLeft = GetConVarInt( "CLASS_SPECTRELEADER_UNLOCK" ) - (classscore8[player] + classscore10[player])
				returnClass = "[GET " + pointsLeft + " POINTS WITH A SPECTRE CLASS]"
			}
			break;
		case 13:
			if (gruntScore[player] >= GetConVarInt("CLASS_PILOT_UNLOCK")) {
				returnClass = "Pilot - " + GetConVarInt("COST_PILOT") + " points";
			}
			else {
				int pointsLeft = GetConVarInt( "CLASS_PILOT_UNLOCK" ) - gruntScore[player]
				returnClass = "[GET " + pointsLeft + " POINTS AS A GRUNT]"
			}
			break;
		case 14:
			if (rifleStreak[player] >= GetConVarInt("CLASS_OPPILOT_UNLOCK_STREAK")) {
				returnClass = "Next-Gen Pilot - " + GetConVarInt("COST_OPPILOT") + " points";
			}
			else {
				string classType = opPilotText();
				returnClass = "[GET A " + GetConVarInt("CLASS_OPPILOT_UNLOCK_STREAK") +" KILLSTREAK" + classType + "]";
			}
			break;
		case 15:
			if ( hemlokPoints[player] >= GetConVarInt( "CLASS_HEMLOK_UNLOCK" ) )
			{
				returnClass = "Hemlok Rifleman - " + GetConVarInt("COST_HEMLOK") + " points"
			}
			else
			{
				int pointsLeft = GetConVarInt( "CLASS_HEMLOK_UNLOCK" ) - hemlokPoints[player]
				returnClass = "[GET " + pointsLeft + " POINTS WITH A HEMLOK RIFLE]"
			}
			break
		default:
			returnClass = "[ERROR]";
			print("Invalid Classnumber to return Class, received " + classNum);
			break;
	}
	/* Here for debugging as the above code was written by AI trained on the current code
	switch( classNum )
	{
		case 0:
			returnClass = "Rifleman"
			break
		case 1:
			returnClass = "Communications"
			break
		case 2:
			returnClass = "Support"
			break
		case 3:
			returnClass = "Marksman - " + GetConVarInt( "COST_MARKSMAN" ) + " points"
			break
		case 4:
			if ( classscore3[player] >= GetConVarInt( "CLASS_SNIPER_UNLOCK" ) )
			{
				returnClass = "Sniper - 10 points"
			}
			else
			{
				returnClass = "[GET " + GetConVarInt( "CLASS_SNIPER_UNLOCK" ) +" POINTS AS A MARKSMAN]"
			}
			break
		case 5:
			returnClass = "Heavy - 10 points"
			break
		case 6:
			returnClass = "Shield Captain - 20 points"
			break
		case 7:
			returnClass = "Specialist - 30 points"
			break
		case 8:
			if ( gruntScore[player] >= GetConVarInt( "CLASS_SPECTRE_UNLOCK" ) )
			{
				returnClass = "Spectre - 20 points"
			}
			else
			{
				returnClass = "[GET " + GetConVarInt( "CLASS_SPECTRE_UNLOCK" ) + " POINTS AS A GRUNT]"
			}
			break
		case 9:
			if ( classscore12[player] >= GetConVarInt( "CLASS_BLASTSPECTRE_UNLOCK" ) )
			{
				returnClass = "Blast Spectre - 25 points"
			}
			else
			{
				returnClass = "[GET " + GetConVarInt( "CLASS_BLASTSPECTRE_UNLOCK" )" POINTS AS A SPECTRE LEADER]"
			}
			break
		case 10:
			if (  classscore8[player] >= GetConVarInt( "CLASS_SNIPESPECTRE_UNLOCK" ) )
			{
				returnClass = "Sniper Spectre - 25 points"
			}
			else
			{
				returnClass = "[GET " + GetConVarInt( "CLASS_SNIPESPECTRE_UNLOCK" ) + " POINTS AS A SPECTRE]"
			}
			break
		case 11:
			if ( specialistDrones[player] >= GetConVarInt( "CLASS_SENTRY_UNLOCK" ) )
			{
				returnClass = "Sentry Technician - 40 points"
			}
			else
			{
				returnClass = "[SPAWN " + GetConVarInt( "CLASS_SENTRY_UNLOCK" ) + " DRONES AS A SPECIALIST]"
			}
			break
		case 12:
			if (  classscore8[player] + classscore10[player] >= GetConVarInt( "CLASS_SPECTRELEADER_UNLOCK" ) )
			{
				returnClass = "Spectre Leader - 35 points"
			}
			else
			{
				returnClass = "[GET " + GetConVarInt( "CLASS_SPECTRELEADER_UNLOCK" ) + " POINTS WITH A SPECTRE CLASS]"
			}
			break
		case 13:
			if ( gruntScore[player] >= GetConVarInt( "CLASS_PILOT_UNLOCK" ) )
			{
				returnClass = "Pilot - 80 points"
			}
			else
			{
				returnClass = "[GET " + GetConVarInt( "CLASS_PILOT_UNLOCK" ) + " POINTS AS A GRUNT]"
			}
			break
		case 14:
			if ( rifleStreak[player] >= GetConVarInt( "CLASS_OPPILOT_UNLOCK_STREAK" ) )
			{
				returnClass = "Next-Gen Pilot - 140 points"
			}
			else
			{
				string classType = opPilotText()
				returnClass = "[GET A " + GetConVarInt( "CLASS_OPPILOT_UNLOCK_STREAK" ) +" KILLSTREAK" + classType + "]"
			}
			break
		default:
			returnClass = "[ERROR]"
			print("Invalid Classnumber to return Class, recieved " + string(classNum))
			break
	}
	*/
	return returnClass
}

function determineClassScore( int classNum )
{
	switch( classNum )
	{
		case 0: // Rifleman
			return 0
		case 1: // Communications
			return 0
		case 2: // Support
			return 0
		case 3: // Marksman
			return GetConVarInt( "COST_MARKSMAN" )
		case 4: // Sniper
			return GetConVarInt( "COST_SNIPER" )
		case 5: // Heavy
			return GetConVarInt( "COST_HEAVY" )
		case 6: // Shield Captain
			return GetConVarInt( "COST_SHIELD_CAPTAIN" )
		case 7: // Specialist
			return GetConVarInt( "COST_SPECIALIST" )
		case 8: // Spectre
			return GetConVarInt( "COST_SPECTRE" )
		case 9: // Blast Spectre
			return GetConVarInt( "COST_BLAST_SPECTRE" )
		case 10: // Sniper Spectre
			return GetConVarInt( "COST_SNIPESPECTRE" )
		case 11: // Sentry Technician
			return GetConVarInt( "COST_SENTRY" )
		case 12: // Spectre Leader
			return GetConVarInt( "COST_SPECTRE_LEADER" )
		case 13: // Pilot
			return GetConVarInt( "COST_PILOT" )
		case 14: // Next-Gen Pilot
			return GetConVarInt( "COST_OPPILOT" )
		case 15: // Hemlok Rifleman
			return GetConVarInt( "COST_HEMLOK" )
		default:
			print("Invalid Classnumber to return Score, recieved " + string(classNum))
			return 80
	}
}

function RemoveScore( entity player, int classNum )
{
	int classScore = expect int(determineClassScore( classNum ))
	usedScore[player] = usedScore[player] + classScore
}

void function CallbackFuncCornerUs( entity player )
{
	thread CornerUsChatterThink( player )
}

void function CornerUsChatterThink( entity player )
{
	string uid = player.GetUID()
	if( playerChatterTable[uid] )
		return
	if( !IsAlive( player ) )
		return
	string curChatter = ""
	//print( "Setting Chatter Unusable" )
	if (player.GetModelName() != $"models/robots/spectre/imc_spectre.mdl" && player.GetModelName() != $"models/humans/pilots/pilot_light_ged_m.mdl")
	{
		curChatter = GRUNT_CHATTERS[ RandomInt( GRUNT_CHATTERS.len() ) ]
	}
	else
	{
		curChatter = SPECTRE_CHATTERS[ RandomInt( SPECTRE_CHATTERS.len() ) ]
	}

	EmitSoundOnEntity( player, curChatter )
	thread DelayedRestoreBattleChatter( uid, 3 )
	//print( "Reset Chatter Usage" )
}

void function CallbackFuncSpotEnemy( entity player )
{
	if (player.GetModelName() != $"models/robots/spectre/imc_spectre.mdl" && player.GetModelName() != $"models/humans/pilots/pilot_light_ged_m.mdl")
	{
		thread SpotEnemyChatterThink( player )
	}
}

void function SpotEnemyChatterThink( entity player )
{
	string uid = player.GetUID()
	if( playerChatterTable[uid] )
		return
	if( !IsAlive( player ) )
		return
	TraceResults traceResult = TraceLine( player.EyePosition(), player.EyePosition() + player.GetViewVector() * 1500, player, (TRACE_MASK_SHOT | CONTENTS_BLOCKLOS), TRACE_COLLISION_GROUP_NONE )
	if( !IsValid( traceResult.hitEnt ) )
	{
		//print( "Didn't trace anything" )
		return
	}
	if( !traceResult.hitEnt.IsNPC() )
	{
		//print( "hitEnt wasn't npc" )
		return
	}
	if( traceResult.hitEnt.GetTeam() == player.GetTeam() )
	{
		array<string> chatterClasses = [ "npc_spectre", "npc_super_spectre", "npc_titan" ]
		string className = traceResult.hitEnt.GetClassName()
		//print( "hitEnt's classname: " + className )
		if( !chatterClasses.contains( className ) )
			return
		switch( className )
		{
			case "npc_spectre":
				EmitSoundOnEntity( player, "diag_imc_grunt" + string( RandomIntRange( 1, 6 ) ) + "_bc_reactSpectreProxFriendly_0" + string( RandomIntRange( 1, 7 ) ) )
				thread DelayedRestoreBattleChatter( uid, 3 )
				break
			case "npc_titan":
				if( CoinFlip() )
					EmitSoundOnEntity( player, "diag_imc_grunt" + string( RandomIntRange( 1, 6 ) ) + "_bc_reactTitanfallFriendlyArrives_01" )
				else
					EmitSoundOnEntity( player, "diag_imc_grunt" + string( RandomIntRange( 1, 6 ) ) + "_bc_reactTitanfallFriendlyInbound_01" )
				thread DelayedRestoreBattleChatter( uid, 5 )
				break
			case "npc_super_spectre":
				EmitSoundOnEntity( player, "diag_imc_grunt" + string( RandomIntRange( 1, 6 ) ) + "_bc_reactReaperFriendlyArrives_0" + string( RandomIntRange( 1, 2 ) ) )
				thread DelayedRestoreBattleChatter( uid, 3 )
				break
		}
		return
	}
	array<string> chatterClasses = [ "npc_spectre", "npc_stalker", "npc_prowler", "npc_super_spectre", "npc_soldier", "npc_titan" ]
	string className = traceResult.hitEnt.GetClassName()
	//print( "hitEnt's classname: " + className )
	if( !chatterClasses.contains( className ) )
		return
	switch( className )
	{
		case "npc_spectre":
			EmitSoundOnEntity( player, "diag_imc_grunt" + string( RandomIntRange( 1, 6 ) ) + "_bc_reactSpectreEnemyMid_0" + string( RandomIntRange( 1, 3 ) ) )
			thread DelayedRestoreBattleChatter( uid, 3 )
			break
		case "npc_stalker":
			EmitSoundOnEntity( player, "diag_imc_grunt" + string( RandomIntRange( 1, 6 ) ) + "_bc_engagingStalker_0" + string( RandomIntRange( 1, 2 ) ) )
			thread DelayedRestoreBattleChatter( uid, 3 )
			break
		case "npc_prowler":
			EmitSoundOnEntity( player, "diag_imc_grunt" + string( RandomIntRange( 1, 6 ) ) + "_bc_engagingProwler_0" + string( RandomIntRange( 1, 2 ) ) )
			thread DelayedRestoreBattleChatter( uid, 3 )
			break
		case "npc_soldier":
			if ( CoinFlip() )
			{
				if ( player.GetTeam() == TEAM_IMC )
					EmitSoundOnEntity( player, "diag_imc_grunt" + string( RandomIntRange( 1, 6 ) ) + "_bc_engageenemygrunt_0" + string( RandomIntRange( 1, 2 ) ) )
				else
					EmitSoundOnEntity( player, "diag_imc_grunt" + string( RandomIntRange( 1, 6 ) ) + "_bc_engagepilotenemy_0" + string( RandomIntRange( 1, 7 ) ) )
			}
			else
				EmitSoundOnEntity( player, "diag_imc_grunt" + string( RandomIntRange( 1, 6 ) ) + "_bc_engagepilotenemy_0" + string( RandomIntRange( 1, 7 ) ) )
			thread DelayedRestoreBattleChatter( uid, 3 )
			break
		case "npc_titan":
			EmitSoundOnEntity( player, "diag_imc_grunt" + string( RandomIntRange( 1, 6 ) ) + "_bc_enemytitanspotcall_0" + string( RandomIntRange( 1, 2 ) ) )
			thread DelayedRestoreBattleChatter( uid, 5 )
			break
		case "npc_super_spectre":
			if( CoinFlip() )
				EmitSoundOnEntity( player, "diag_sp_ReaperTown_BM102_15_01_mcor_grunt3" )
			else
				EmitSoundOnEntity( player, "diag_sp_ReaperTown_BM102_16_01_mcor_grunt2" )
			thread DelayedRestoreBattleChatter( uid, 3 )
			break
	}
}

void function DelayedRestoreBattleChatter( string uid, float delay )
{
	playerChatterTable[uid] = true
	wait delay
	playerChatterTable[uid] = false
}

void function OnPlayerRespawned( entity player )
{
	deathDelay[player] = false
	clearClassMessage( player )
	if (hasSpawned[player])
	{
		BecomesGrunt_Class(player, selectedClass[player])
		RemoveScore( player, selectedClass[player] )
	}
	else
	{
		BecomesGrunt_Random(player)
	}
	thread OnPlayerRespawned_Threaded( player )
}

void function OnPlayerRespawned_Threaded( entity player )
{
	bool dropShipStatus =  checkDropShipStatus(player) //Spawn in dropship if one is available

	if ( !gruntSpawnoverride )
	{
		print("Skipping grunt spawn sequence")
	}
	else if (!hasSpawned[player])
	{
		print("Respawned normally because it was their first spawn (failsafe)")
	}
	else if ( player.GetModelName() == $"models/humans/pilots/pilot_medium_geist_m.mdl" || player.GetModelName() == $"models/humans/pilots/pilot_medium_stalker_m.mdl")
	{
		print("Respawned in Dropship because they were a pilot!")
		RespawnInDropShip( player )
	}
	else if ( dropShipStatus == true )
	{
		print("Respawned in drop ship because one was available!")
		RespawnInDropShip( player )
	}
	else
	{
		int random = RandomInt(10)
		if ( random == 1 ) //10% chance to create a new dropship
		{
			RespawnInDropShip( player )
			print("Respawned in Dropship")
		}
		else if ( random == 4 || random == 5 || random == 6 || random == 3) // 40% chance of spawning in droppod
		{
			SpawnFromDroppod( player )
			print("Respawned in Droppod")
		}
		else
		{
			print("Respawned without animation") // 50% chance of regular spawn
		}
	}
	WaitFrame()
	if( IsValid(player) )
		PlayerEarnMeter_SetMode( player, eEarnMeterMode.DISABLED )	//彻底关闭强化(泰坦)条
	ClearCycle(player)
	if (!hasSpawned[player])
	{
		hasSpawned[player] = true
		thread sendPingInfo( player )
		thread sendRandomInfo( player )
	}
}

void function sendPingInfo( entity player )
{
	wait 16
	print("Sending ping info")
	NSSendInfoMessageToPlayer(player, "Hold your %%USE%% key to say a voiceline, or press %%USE%% to call out enemies" )
}

void function sendScoreInfo( entity player )
{
	int score = calculateScore( player )
	NSSendPopUpMessageToPlayer( player, "You have " + score + " points to spend")
}

void function sendCycleInfo( entity player )
{
	wait 1
	print("Sending change info")
	NSSendInfoMessageToPlayer(player, "Use WASD, or Controller Bumpers while in the deployment screen to switch classes" )
}

void function sendRandomInfo( entity player )
{
	wait RandomIntRange( 60, 120 ) //Every 1-2 minutes send info
	print("Sending random info")
	int infoMessage = RandomInt(11)
	string infoText = ""
	switch ( infoMessage )
	{
		case 0:
			infoText = "Focusing on a specific class can give you extra perks from playing it"
			break
		case 1:
			infoText = "Hold your %%USE%% key to say a voiceline, or press %%USE%% to call out enemies"
			break
		case 2:
			infoText = "Extra info on classes can be found in the deployment screen"
			break
		case 3:
			infoText = "Make sure you read class descriptions, some abilites can change how you fight"
			break
		case 4:
			infoText = "Your points reset every round, spend those points!"
			break
		case 5:
			infoText = "Use WASD or Controller Bumpers while in the deployment screen to switch classes"
			break
		case 6:
			infoText = "Most spectre classes have double-jump, use this to reach new heights"
			break
		case 7:
			infoText = "You automatically gain 5 points from using Blast Spectre's suicide ability, so blast away!"
			break
		case 8:
			infoText = "Specialists can build an army of drones that can overwhelm unsuspecing enemies"
			break
		case 9:
			infoText = "Make sure to stick together to take out targets like Reapers or Pilots"
			break
		case 10:
			infoText = "The right tool for the right job, the heavy class can make quick work of Reapers and Titans!"
			break
		default:
			infoText = "Focusing on a specific class can give you extra perks from playing it"
			break
	}
	NSSendInfoMessageToPlayer(player, infoText)
	thread sendRandomInfo( player ) //creats infinite loop
	return
}

void function StartKillerOutline( entity victim, entity attacker, var damageInfo )
{
	if( attacker.IsNPC() || attacker.IsPlayer() )
		Highlight_SetDeathRecapHighlight( attacker, "killer_outline" )
}

void function DropGrenade( entity victim, entity attacker, var damageInfo  ) {
	if ( IsValid(victim) ) {
		entity offHandName = victim.GetOffhandWeapon(OFFHAND_ORDNANCE)
		if ( offHandName.GetWeaponClassName() == "mp_weapon_grenade_gravity") // Don't drop gravstar, will likely cause a crash if picked up because of weapon mods
			return
		vector droppoint = victim.GetOrigin()
		entity grenade = CreateWeaponEntityByNameWithPhysics( offHandName.GetWeaponClassName(), droppoint, <0,0,0> )
		grenade.SetMods(["grunt_mode"])
		Highlight_SetOwnedHighlight( grenade, "weapon_drop_active" )
		Highlight_SetNeutralHighlight( grenade, "weapon_drop_normal" )
	}
}

void function DropNPCGrenade( entity victim, entity attacker, var damageInfo ) {
	if ( IsValid(victim) ) {
		bool shouldDropGrenade = CoinFlip() && CoinFlip() && CoinFlip()
		vector droppoint = victim.GetOrigin()
		if ( victim.GetClassName() == "npc_soldier" ) // AI Grunt
		{
			if ( victim.GetModelName() == $"models/humans/pilots/sp_medium_reaper_m.mdl" || victim.GetModelName() == $"models/humans/pilots/sp_medium_stalker_m.mdl") // AI Pilot
			{
				entity grenade = CreateWeaponEntityByNameWithPhysics( "mp_weapon_frag_grenade", droppoint, <0,0,0>)
				grenade.SetMods(["grunt_mode"])
				Highlight_SetOwnedHighlight( grenade, "weapon_drop_active" )
				Highlight_SetNeutralHighlight( grenade, "weapon_drop_normal" )
			}
			else if ( victim.GetModelName() == $"models/humans/grunts/imc_grunt_shield_captain.mdl" ) // AI Shield Captain
			{
				entity grenade = CreateWeaponEntityByNameWithPhysics( "mp_weapon_grenade_electric_smoke", droppoint, <0,0,0>)
				grenade.SetMods(["grunt_mode"])
				Highlight_SetOwnedHighlight( grenade, "weapon_drop_active" )
				Highlight_SetNeutralHighlight( grenade, "weapon_drop_normal" )
			}
			else if ( victim.GetModelName() == $"models/humans/grunts/imc_grunt_smg.mdl" && victim.GetTeam() == TEAM_MILITIA) //AI Militia Specialist
			{
				entity grenade = CreateWeaponEntityByNameWithPhysics( "mp_weapon_grenade_emp", droppoint, <0,0,0>)
				grenade.SetMods(["grunt_mode"])
				Highlight_SetOwnedHighlight( grenade, "weapon_drop_active" )
				Highlight_SetNeutralHighlight( grenade, "weapon_drop_normal" )
			}
			else if ( victim.GetModelName() == $"models/humans/grunts/mlt_grunt_smg.mdl" && victim.GetTeam() == TEAM_IMC) //AI IMC Specialist
			{
				entity grenade = CreateWeaponEntityByNameWithPhysics( "mp_weapon_grenade_emp", droppoint, <0,0,0>)
				grenade.SetMods(["grunt_mode"])
				Highlight_SetOwnedHighlight( grenade, "weapon_drop_active" )
				Highlight_SetNeutralHighlight( grenade, "weapon_drop_normal" )
			}
			else // Normal Grunt
			{
				if ( shouldDropGrenade ) {
					entity grenade = CreateWeaponEntityByNameWithPhysics( "mp_weapon_frag_grenade", droppoint, <0,0,0>)
					grenade.SetMods(["grunt_mode"])
					Highlight_SetOwnedHighlight( grenade, "weapon_drop_active" )
					Highlight_SetNeutralHighlight( grenade, "weapon_drop_normal" )
				}
			}
		}
		if ( victim.GetClassName() == "npc_spectre" )
		{
			if ( victim.GetMaxHealth() == 500 ) // AI Spectre Leader
			{
				entity grenade = CreateWeaponEntityByNameWithPhysics( "mp_weapon_grenade_emp", droppoint, <0,0,0>)
				grenade.SetMods(["grunt_mode"])
				Highlight_SetOwnedHighlight( grenade, "weapon_drop_active" )
				Highlight_SetNeutralHighlight( grenade, "weapon_drop_normal" )
			}
			else // AI Spectre
			{
				if ( shouldDropGrenade ) {
					entity grenade = CreateWeaponEntityByNameWithPhysics( "mp_weapon_grenade_emp", droppoint, <0,0,0>)
					grenade.SetMods(["grunt_mode"])
					Highlight_SetOwnedHighlight( grenade, "weapon_drop_active" )
					Highlight_SetNeutralHighlight( grenade, "weapon_drop_normal" )
				}
			}
		}
		if ( victim.GetClassName() == "npc_stalker" ) // Stalker
		{
			if ( shouldDropGrenade ) {
				entity grenade = CreateWeaponEntityByNameWithPhysics( "mp_weapon_grenade_emp", droppoint, <0,0,0>)
				grenade.SetMods(["grunt_mode"])
				Highlight_SetOwnedHighlight( grenade, "weapon_drop_active" )
				Highlight_SetNeutralHighlight( grenade, "weapon_drop_normal" )
			}
		}
	}
}

void function OnGruntKilled( entity victim, entity attacker, var damageInfo ) //On player killed
{
	if ( rifleStreak[victim] < 10 )
		rifleStreak[victim] = 0
	PlayEnemyKilledChatter( victim, attacker )
	PlayFriendlyKilledChatter( victim, attacker )
	if ( attacker.IsPlayer() )
	{
		if ( GetConVarString( "CLASS_OPPILOT_UNLOCK_TYPE" ) == "any" ) // Any class
		{
			rifleStreak[attacker] += 1
			print("Increased rifleman streak")
			if ( rifleStreak[attacker] == GetConVarInt( "CLASS_OPPILOT_UNLOCK_STREAK" ) )
				NSSendAnnouncementMessageToPlayer( attacker, "Unlocked Next-Gen Pilot", "Achieved" + GetConVarInt( "CLASS_OPPILOT_UNLOCK_STREAK" ) + "killstreak", <1,1,0>, 1, 1 )
		}
		else if ( GetConVarString( "CLASS_OPPILOT_UNLOCK_TYPE" ) == "free" ) // Free classes
		{
			if ( currentClass[attacker] == 0 || currentClass[attacker] == 1 || currentClass[attacker] == 2 )
			{
				rifleStreak[attacker] += 1
				print("Increased rifleman streak")
				if ( rifleStreak[attacker] == GetConVarInt( "CLASS_OPPILOT_UNLOCK_STREAK" ))
					NSSendAnnouncementMessageToPlayer( attacker, "Unlocked Next-Gen Pilot", "Achieved " + GetConVarInt( "CLASS_OPPILOT_UNLOCK_STREAK" ) + " killstreak as a free grunt class", <1,1,0>, 1, 1 )
			}
		}
		else if ( GetConVarString( "CLASS_OPPILOT_UNLOCK_TYPE" ) == "rifle" ) // Grunt classes
		{
			if ( currentClass[attacker] == 0 )
			{
				rifleStreak[attacker] += 1
				print("Increased rifleman streak")
				if ( rifleStreak[attacker] == GetConVarInt( "CLASS_OPPILOT_UNLOCK_STREAK" ))
					NSSendAnnouncementMessageToPlayer( attacker, "Unlocked Next-Gen Pilot", "Achieved " + GetConVarInt( "CLASS_OPPILOT_UNLOCK_STREAK" ) + " killstreak as a Rifleman", <1,1,0>, 1, 1 )
			}
		}
		else // Sets to "grunt"
		{
			if ( currentClass[attacker] == 0 || currentClass[attacker] == 1 || currentClass[attacker] == 2 || currentClass[attacker] == 3 || currentClass[attacker] == 4 || currentClass[attacker] == 5 || currentClass[attacker] == 6 || currentClass[attacker] == 11 || currentClass[attacker] == 15)
			{
				rifleStreak[attacker] += 1
				print("Increased rifleman streak")
				if ( rifleStreak[attacker] == GetConVarInt( "CLASS_OPPILOT_UNLOCK_STREAK" ))
					NSSendAnnouncementMessageToPlayer( attacker, "Unlocked Next-Gen Pilot", "Achieved " + GetConVarInt( "CLASS_OPPILOT_UNLOCK_STREAK" ) + " killstreak as a Grunt Class", <1,1,0>, 1, 1 )
			}
		}

	}
	thread startDelay( victim )
}

void function startDelay( entity victim )
{
	wait 0.5
	deathDelay[victim] = true
}

void function PlayEnemyKilledChatter( entity victim, entity attacker )
{
	if( attacker.IsPlayer() )
		thread DelayedEnemyKilledChatter( attacker )
}

void function DelayedEnemyKilledChatter( entity player )
{
	string uid = player.GetUID()
	if( playerChatterTable[uid] )
		return
	wait RandomFloatRange( 0.3, 0.5 )
	if( IsAlive( player ) )
	{
		EmitSoundOnEntity( player, "diag_imc_grunt" + string( RandomIntRange( 1, 6 ) ) + "_bc_killenemygrunt_0" + string( RandomIntRange( 1, 2 ) ) )
	}
	thread DelayedRestoreBattleChatter( uid, 3 )
}

void function PlayFriendlyKilledChatter( entity victim, entity attacker )
{
	int team = victim.GetTeam()
	array<entity> nearbyAllies = GetPlayerArrayEx( "any", TEAM_ANY, TEAM_ANY, victim.GetOrigin(), 250 )
	foreach( entity player in nearbyAllies )
	{
		if( IsValid( player ) )
		{
			if( player.GetTeam() == team )
				thread DelayedFriendlyKilledChatter( player )
		}
	}
}

void function DelayedFriendlyKilledChatter( entity player )
{
	string uid = player.GetUID()
	if( playerChatterTable[uid] )
		return
	wait RandomFloatRange( 0.3, 0.5 )
	if( IsAlive( player ) )
	{
		array<entity> nearbyAllies = GetPlayerArrayEx( "any", player.GetTeam(), TEAM_ANY, player.GetOrigin(), 250 )
		if( nearbyAllies.len() == 0 )
		{
			EmitSoundOnEntity( player, "diag_imc_grunt" + string( RandomIntRange( 1, 6 ) ) + "_bc_squaddeplete" )
			thread DelayedRestoreBattleChatter( uid, 5 )
		}
		else
		{
			EmitSoundOnEntity( player, "diag_imc_grunt" + string( RandomIntRange( 1, 6 ) ) + "_bc_allygruntdown" )
			thread DelayedRestoreBattleChatter( uid, 3 )
		}
	}
}

void function OnPlayerChangeLoadout( entity player , PilotLoadoutDef p)
{
	BecomesGrunt_Loadout( player )
	playerLoadout[player] <- p
}

void function BecomesGrunt_Loadout( entity player )
{
	if( IsValid( player ) )
	{
		Highlight_SetFriendlyHighlight( player, "fw_friendly" )
		//player.kv.gravity = 1.4
		//HideName( player )
		player.SetNameVisibleToEnemy( false )
	}
}

void function SetGruntSkin( entity player, string pMods, string pModel )
{
	if (pModel == "models/humans/pilots/pilot_light_ged_m.mdl")
	{
		player.SetModel( $"models/humans/pilots/pilot_light_ged_m.mdl")
	}
	else if (pModel == "models/humans/pilots/pilot_medium_stalker_m.mdl")
	{
		player.SetModel( $"models/humans/pilots/pilot_medium_stalker_m.mdl")
	}
	else if(pModel == "models/robots/spectre/imc_spectre.mdl")
	{
		player.SetModel( $"models/robots/spectre/imc_spectre.mdl")
	}
	else if(pModel == "models/robots/marvin/marvin.mdl")
	{
		player.SetModel( $"models/robots/marvin/marvin.mdl")
	}
	else if (pModel == "models/humans/grunts/imc_grunt_shield_captain.mdl")
	{
		player.SetModel( $"models/humans/grunts/imc_grunt_shield_captain.mdl")
	} //MLT
	else if (pModel == "models/humans/grunts/mlt_grunt_shotgun.mdl")
	{
		player.SetModel( $"models/humans/grunts/mlt_grunt_shotgun.mdl")
	}
	else if (pModel == "models/humans/grunts/mlt_grunt_rifle.mdl")
	{
		player.SetModel( $"models/humans/grunts/mlt_grunt_rifle.mdl")
	}
	else if (pModel == "models/humans/grunts/mlt_grunt_shotgun.mdl")
	{
		player.SetModel( $"models/humans/grunts/mlt_grunt_shotgun.mdl")
	}
	else if (pModel == "models/humans/grunts/mlt_grunt_smg.mdl")
	{
		player.SetModel( $"models/humans/grunts/mlt_grunt_smg.mdl")
	}
	else if (pModel == "models/humans/grunts/mlt_grunt_lmg.mdl")
	{
		player.SetModel( $"models/humans/grunts/mlt_grunt_lmg.mdl")
	} //IMC
	else if (pModel == "models/humans/grunts/imc_grunt_shotgun.mdl")
	{
		player.SetModel( $"models/humans/grunts/imc_grunt_shotgun.mdl")
	}
	else if (pModel == "models/humans/grunts/imc_grunt_rifle.mdl")
	{
		player.SetModel( $"models/humans/grunts/imc_grunt_rifle.mdl")
	}
	else if (pModel == "models/humans/grunts/imc_grunt_shotgun.mdl")
	{
		player.SetModel( $"models/humans/grunts/imc_grunt_shotgun.mdl")
	}
	else if (pModel == "models/humans/grunts/imc_grunt_smg.mdl")
	{
		player.SetModel( $"models/humans/grunts/imc_grunt_smg.mdl")
	}
	else if (pModel == "models/humans/grunts/imc_grunt_lmg.mdl")
	{
		player.SetModel( $"models/humans/grunts/imc_grunt_lmg.mdl")
	}
	else if (pModel == "models/humans/pilots/pilot_light_core.mdl")
	{
		player.SetModel( $"models/humans/pilots/pilot_medium_geist_m.mdl")
	}
}

void function BecomesGrunt_Random( entity player )
{
	int classNum = RandomInt(8)
	BecomesGrunt_Class( player, classNum )
}

void function BecomesGrunt_Class( entity player, int classNum )
{
	if( IsValid(player) )
	{
		TakeAllWeapons( player )
		string secondary = "mp_weapon_semipistol"
		bool antiTitanTrue = false
		string antiTitan = "mp_weapon_rocket_launcher"
		string pMods = "Grunt"
		string popUpText = ""
		bool pilotMelee = false
		string pModel = "models/humans/grunts/mlt_grunt_rifle.mdl"
		currentClass[player] = classNum
		switch( classNum )
		{
			case 0: //Rifleman
				if( player.GetTeam() == TEAM_IMC )
				{
					pModel = "models/humans/grunts/imc_grunt_rifle.mdl"
				}
				else
				{
					pModel = "models/humans/grunts/mlt_grunt_rifle.mdl"
				}
				popUpText = "Spawning as Rifleman"
				string weapon = CRIFLE[ RandomInt( CRIFLE.len() ) ]

				if ( classscore0[player] >= GetConVarInt( "GR_ATTACHMENT_LEVEL" ) )
					player.GiveWeapon(weapon, ["hcog","pas_fast_reload"])
				else if ( classscore0[player] >= GetConVarInt( "GR_OPTICS_LEVEL" ) )
					player.GiveWeapon(weapon, ["hcog"])
				else
					player.GiveWeapon(weapon)

				player.GiveOffhandWeapon( "mp_weapon_frag_grenade", OFFHAND_ORDNANCE, ["grunt_mode"] )
				antiTitanTrue = false
				break
			case 1: //SMG
				if( player.GetTeam() == TEAM_IMC )
				{
					pModel = "models/humans/grunts/imc_grunt_smg.mdl"
				}
				else
				{
					pModel = "models/humans/grunts/mlt_grunt_smg.mdl"
				}
				popUpText = "Spawning as Communications"
				string weapon = CSMG[ RandomInt( CSMG.len() ) ]

				if ( classscore1[player] >= GetConVarInt( "GR_ATTACHMENT_LEVEL" ) )
				{
					if (weapon != "mp_weapon_alternator_smg")
						player.GiveWeapon(weapon, ["holosight","pas_run_and_gun"] )
					else
						player.GiveWeapon(weapon, ["hcog","pas_run_and_gun"] )
				}
				else if ( classscore1[player] >= GetConVarInt( "GR_OPTICS_LEVEL" ) )
				{
					if (weapon != "mp_weapon_alternator_smg")
						player.GiveWeapon(weapon, ["holosight"] )
					else
						player.GiveWeapon(weapon, ["hcog"] )
				}
				else
					player.GiveWeapon(weapon)

				player.GiveOffhandWeapon( "mp_weapon_frag_grenade", OFFHAND_ORDNANCE, ["grunt_mode"] )
				antiTitanTrue = false
				break
			case 2: //Shotgun
				if( player.GetTeam() == TEAM_IMC )
				{
					pModel = "models/humans/grunts/imc_grunt_shotgun.mdl"
				}
				else
				{
					pModel = "models/humans/grunts/mlt_grunt_shotgun.mdl"
				}
				popUpText = "Spawning as Support"

				if ( classscore2[player] >= GetConVarInt( "GR_ATTACHMENT_LEVEL_MULTIPLE_2" ) )
					player.GiveWeapon("mp_weapon_shotgun", ["extended_ammo","pas_fast_swap"] )
				else if ( classscore2[player] >= GetConVarInt( "GR_ATTACHMENT_LEVEL_MULTIPLE" ) )
					player.GiveWeapon("mp_weapon_shotgun", ["extended_ammo"] )
				else
					player.GiveWeapon("mp_weapon_shotgun")

				player.GiveOffhandWeapon( "mp_weapon_frag_grenade", OFFHAND_ORDNANCE, ["grunt_mode"] )
				antiTitanTrue = false
				break
			case 3: // Marksman
				if( player.GetTeam() == TEAM_IMC )
				{
					pModel = "models/humans/grunts/imc_grunt_rifle.mdl"
				}
				else
				{
					pModel = "models/humans/grunts/mlt_grunt_rifle.mdl"
				}

				if ( classscore3[player] >= GetConVarInt( "GR_ATTACHMENT_LEVEL" ) )
					player.GiveWeapon("mp_weapon_g2", ["redline_sight","pas_fast_ads"])
				else if ( classscore3[player] >= GetConVarInt( "GR_OPTICS_LEVEL" ) )
					player.GiveWeapon("mp_weapon_g2", ["redline_sight"])
				else
					player.GiveWeapon("mp_weapon_g2")

				popUpText = "Spawning as Marksman"
				player.GiveOffhandWeapon( "mp_weapon_frag_grenade", OFFHAND_ORDNANCE, ["grunt_mode"] )
				antiTitanTrue = false
				break
			case 4: // Sniper
				if( player.GetTeam() == TEAM_IMC )
				{
					pModel = "models/humans/grunts/imc_grunt_rifle.mdl"
				}
				else
				{
					pModel = "models/humans/grunts/mlt_grunt_rifle.mdl"
				}

				if ( classscore4[player] >= GetConVarInt( "GR_ATTACHMENT_LEVEL" ) )
					player.GiveWeapon("mp_weapon_dmr", ["scope_4x","extended_ammo"])
				else if ( classscore4[player] >= GetConVarInt( "GR_OPTICS_LEVEL" ) )
					player.GiveWeapon("mp_weapon_dmr", ["scope_4x"])
				else
					player.GiveWeapon("mp_weapon_dmr")

				popUpText = "Spawning as Sniper"
				player.GiveOffhandWeapon( "mp_weapon_frag_grenade", OFFHAND_ORDNANCE, ["grunt_mode"] )
				antiTitan = "mp_weapon_rocket_launcher"
				antiTitanTrue = true
				break
			case 5: //Heavy
				if( player.GetTeam() == TEAM_IMC )
				{
					pModel = "models/humans/grunts/imc_grunt_lmg.mdl"
				}
				else
				{
					pModel = "models/humans/grunts/mlt_grunt_lmg.mdl"
				}
				popUpText = "Spawning as Heavy"
				string weapon = CHEAVY[ RandomInt( CHEAVY.len() ) ]

				if ( classscore5[player] >= GetConVarInt( "GR_ATTACHMENT_LEVEL" ) )
				{
					if (weapon != "mp_weapon_smr")
						player.GiveWeapon(weapon, ["redline_sight","pas_fast_reload"] )
					else
						player.GiveWeapon(weapon, ["pas_fast_reload"] )
				}
				else if ( classscore5[player] >= GetConVarInt( "GR_OPTICS_LEVEL" ) )
				{
					if (weapon != "mp_weapon_smr")
						player.GiveWeapon(weapon, ["redline_sight"])
					else
						player.GiveWeapon(weapon)
				}
				else
					player.GiveWeapon(weapon)

				secondary = "mp_weapon_wingman"
				player.GiveOffhandWeapon( "mp_weapon_satchel", OFFHAND_ORDNANCE, ["grunt_mode"] )
				antiTitan = "mp_weapon_rocket_launcher"
				antiTitanTrue = true
				break
			case 6: //Captain
				pModel = "models/humans/grunts/imc_grunt_shield_captain.mdl"
				popUpText = "Spawning as Shield Captain"

				if ( classscore6[player] >= GetConVarInt( "GR_ATTACHMENT_LEVEL" ) )
					player.GiveWeapon("mp_weapon_lmg", ["aog","extended_ammo"])
				else if ( classscore6[player] >= GetConVarInt( "GR_OPTICS_LEVEL" ) )
					player.GiveWeapon("mp_weapon_lmg", ["aog"])
				else
					player.GiveWeapon("mp_weapon_lmg")

				secondary = "mp_weapon_wingman"
				player.GiveOffhandWeapon( "mp_weapon_grenade_electric_smoke", OFFHAND_ORDNANCE, ["grunt_mode"] )
				antiTitanTrue = false
				thread ActivatePersonalShield( player )
				pMods = "Captain"
				break
			case 7: //Specialist
				if ( GetConVarString( "SPECIALIST_PLAYER_MODELS" ) == "robot" ) {
					pModel = "models/humans/pilots/pilot_light_ged_m.mdl"
				} else {
					if (player.GetTeam() == TEAM_MILITIA)
					{
						pModel = "models/humans/grunts/imc_grunt_smg.mdl"
					}
					else
					{
						pModel = "models/humans/grunts/mlt_grunt_smg.mdl"
					}
				}
				popUpText = "Spawning as Specialist"
				player.GiveOffhandWeapon( "mp_weapon_grenade_emp", OFFHAND_ORDNANCE, ["grunt_mode"] )
				secondary = "mp_weapon_shotgun_pistol"
				player.GiveOffhandWeapon( "mp_weapon_frag_drone", OFFHAND_SPECIAL, ["drone_spawner"] )
				string weapon = CSPECIAL[ RandomInt( CSPECIAL.len() ) ]

				if ( classscore7[player] >= GetConVarInt( "GR_ATTACHMENT_LEVEL_MULTIPLE_2" ) )
					player.GiveWeapon(weapon, ["pas_fast_reload","pas_fast_swap"] )
				else if ( classscore7[player] >= GetConVarInt( "GR_ATTACHMENT_LEVEL_MULTIPLE" ) )
					player.GiveWeapon(weapon, ["pas_fast_swap"] )
				else
					player.GiveWeapon(weapon)

				antiTitanTrue = true
				antiTitan = "mp_weapon_mgl"
				pMods = "Specialist"
				break
			case 8: //Spectre
				pModel = "models/robots/spectre/imc_spectre.mdl"
				popUpText = "Spawning as Spectre"

				if ( classscore8[player] >= GetConVarInt( "GR_ATTACHMENT_LEVEL" ) )
					player.GiveWeapon("mp_weapon_hemlok_smg", ["holosight","pas_fast_reload"])
				else if ( classscore8[player] >= GetConVarInt( "GR_OPTICS_LEVEL" ) )
					player.GiveWeapon("mp_weapon_hemlok_smg", ["holosight"])
				else
					player.GiveWeapon("mp_weapon_hemlok_smg")

				player.GiveOffhandWeapon( "mp_weapon_grenade_emp", OFFHAND_ORDNANCE, ["grunt_mode"] )
				antiTitanTrue = false
				pMods = "Spectre"
				break
			case 9: //Blast Spectre
				pModel = "models/robots/spectre/imc_spectre.mdl"
				popUpText = "Spawning as Blast Spectre"

				if ( classscore9[player] >= GetConVarInt( "GR_ATTACHMENT_LEVEL" ) )
					player.GiveWeapon("mp_weapon_lstar", ["threat_scope"])
				else
					player.GiveWeapon("mp_weapon_lstar")

				player.GiveOffhandWeapon( "mp_weapon_grenade_emp", OFFHAND_ORDNANCE, ["grunt_mode"] )
				player.GiveOffhandWeapon( "mp_weapon_frag_grenade", OFFHAND_SPECIAL, ["spectre_bomb"] )
				secondary = "mp_weapon_wingman"
				antiTitanTrue = false
				pMods = "Stalker"
				break
			case 10: //Sniper Spectre
				pModel = "models/robots/spectre/imc_spectre.mdl"
				popUpText = "Spawning as Sniper Spectre"
				string weapon = CSNIPER[ RandomInt( CSNIPER.len() ) ]

				if ( classscore10[player] >= GetConVarInt( "GR_ATTACHMENT_LEVEL_MULTIPLE_2" ) )
				{
					if (weapon == "mp_weapon_doubletake" )
					{
						player.GiveWeapon( weapon, [ "burn_mod_doubletake","pas_fast_ads" ] ) // DoubleTake
					}
					else if (weapon == "mp_weapon_sniper" )
					{
						player.GiveWeapon( weapon, ["burn_mod_sniper","pas_fast_ads" ] ) // Kraber
					}
				}
				else if ( classscore10[player] >= GetConVarInt( "GR_ATTACHMENT_LEVEL_MULTIPLE" ) )
				{
					player.GiveWeapon( weapon, [ "pas_fast_ads" ] )
				}
				else
				{
					if ( CoinFlip() )
						player.GiveWeapon( "mp_weapon_doubletake" )
					else
						player.GiveWeapon( "mp_weapon_sniper" )
				}


				player.GiveOffhandWeapon( "mp_weapon_grenade_emp", OFFHAND_ORDNANCE, ["grunt_mode"] )
				antiTitanTrue = true
				antiTitan = "mp_weapon_defender"
				pMods = "Spectre"
				break
			case 11: //Sentry Tech
				pModel = "models/humans/grunts/imc_grunt_shield_captain.mdl"
				popUpText = "Spawning as Sentry Technician"
				if ( classscore11[player] >= GetConVarInt( "GR_ATTACHMENT_LEVEL_MULTIPLE_2" ) )
					player.GiveWeapon("mp_weapon_pulse_lmg", ["extended_ammo", "pas_fast_reload"])
				else if ( classscore11[player] >= GetConVarInt( "GR_ATTACHMENT_LEVEL_MULTIPLE" ))
					player.GiveWeapon("mp_weapon_pulse_lmg", ["extended_ammo"])
				else
					player.GiveWeapon("mp_weapon_pulse_lmg")

				secondary = "mp_weapon_autopistol"
				player.GiveOffhandWeapon( "mp_weapon_grenade_electric_smoke", OFFHAND_ORDNANCE, ["grunt_mode"] )
				player.GiveOffhandWeapon( "mp_ability_turretweapon", OFFHAND_SPECIAL, ["sentry_tech_grunt_mode","burnmeter_ap_turret_weapon"] )
				antiTitanTrue = false
				pMods = "Tech"
				break

			case 12: //Spectre Leader
				pModel = "models/robots/spectre/imc_spectre.mdl"
				popUpText = "Spawning as Spectre Leader"

				if ( classscore12[player] >= GetConVarInt( "GR_ATTACHMENT_LEVEL_MULTIPLE_2" ) )
					player.GiveWeapon("mp_weapon_esaw", ["extended_ammo", "threat_scope"])
				else if ( classscore12[player] >= GetConVarInt( "GR_ATTACHMENT_LEVEL_MULTIPLE" ) )
					player.GiveWeapon("mp_weapon_esaw", ["threat_scope"])
				else
					player.GiveWeapon("mp_weapon_esaw")

				secondary = "mp_weapon_wingman"
				player.GiveOffhandWeapon( "mp_weapon_grenade_emp", OFFHAND_ORDNANCE ) // Regenerating Grenade
				antiTitanTrue = true
				antiTitan = "mp_weapon_arc_launcher"
				pMods = "Spectre Leader"
				break
			case 13: //Pilot
				pModel = "models/humans/pilots/pilot_light_core.mdl"
				popUpText = "Respawning as Pilot"
				player.GiveWeapon("mp_weapon_rspn101_og", ["hcog", "tactical_cdr_on_kill","burn_mod_rspn101"])
				secondary = "mp_weapon_autopistol"
				player.GiveOffhandWeapon( "mp_weapon_frag_grenade", OFFHAND_ORDNANCE)
				player.GiveOffhandWeapon( "mp_ability_cloak", OFFHAND_SPECIAL)
				pilotMelee = true
				antiTitanTrue = true
				antiTitan = "mp_weapon_arc_launcher"
				pMods = "Pilot"
				string playerName = player.GetPlayerName()
				Chat_ServerBroadcast(playerName + " has become a Pilot!",true)
				break
			case 14: // Next-Gen Pilot
				pModel = "models/humans/pilots/pilot_medium_stalker_m.mdl"
				popUpText = "Respawning as Next-Gen Pilot"
				player.GiveWeapon("mp_weapon_rspn101_og", ["hcog","extended_ammo","pas_run_and_gun", "tactical_cdr_on_kill","burn_mod_rspn101"])
				secondary = "mp_weapon_smart_pistol"
				player.TakeOffhandWeapon(0)
				player.TakeOffhandWeapon(1)
				player.TakeOffhandWeapon(2)
				player.TakeOffhandWeapon(4)
				player.GiveOffhandWeapon( "mp_weapon_grenade_gravity", 0)
				player.GiveOffhandWeapon( "mp_ability_heal", 1)
				player.GiveOffhandWeapon( "mp_ability_holopilot", 2)
				player.GiveOffhandWeapon( "mp_weapon_grenade_sonar", 4)
				pilotMelee = true
				antiTitanTrue = true
				antiTitan = "mp_weapon_arc_launcher"
				pMods = "Pilot"
				string playerName = player.GetPlayerName()
				Chat_ServerBroadcast(playerName + " has become a Next-Gen Pilot!",true)
				break
			case 15: // Hemlock Rifleman
				if( player.GetTeam() == TEAM_IMC )
				{
					pModel = "models/humans/grunts/imc_grunt_rifle.mdl"
				}
				else
				{
					pModel = "models/humans/grunts/mlt_grunt_rifle.mdl"
				}
				popUpText = "Spawning as Hemlock Rifleman"
				
				string weapon = "mp_weapon_hemlok"
				secondary = "mp_weapon_hemlok_smg"
				pMods = "Captain" // Health buff

				if ( classscore15[player] >= GetConVarInt( "GR_ATTACHMENT_LEVEL_MULTIPLE_2" ) )
					player.GiveWeapon(weapon, ["hcog","extended_ammo","pas_fast_ads","burn_mod_hemlok"])
				else if ( classscore15[player] >= GetConVarInt( "GR_ATTACHMENT_LEVEL" ) )
					player.GiveWeapon(weapon, ["hcog","extended_ammo","pas_fast_ads"])
				else if ( classscore15[player] >= GetConVarInt( "GR_ATTACHMENT_LEVEL_MULTIPLE" ) )
					player.GiveWeapon(weapon, ["hcog","extended_ammo"])
				else if ( classscore15[player] >= GetConVarInt( "GR_OPTICS_LEVEL" ) )
					player.GiveWeapon(weapon, ["hcog"])
				else
					player.GiveWeapon(weapon)

				player.GiveOffhandWeapon( "mp_weapon_frag_grenade", OFFHAND_ORDNANCE, ["grunt_mode"] )
				antiTitanTrue = true
				break
			default:
				print("Invalid Class Number: Recieved " + string(classNum))
				pModel = "models/humans/grunts/imc_grunt_rifle.mdl"
				popUpText = "Invalid Class - Spawning as Rifleman"
				string weapon = CRIFLE[ RandomInt( CRIFLE.len() ) ]
				player.GiveWeapon(weapon)
				player.GiveOffhandWeapon( "mp_weapon_frag_grenade", OFFHAND_ORDNANCE, ["grunt_mode"] )
				antiTitanTrue = false
				break
		}
		SendHudMessage(player, "",  -1, -0.2, 255, 255, 255, 255, 0.15, 6, 1) //Blank to remove class info
		NSSendPopUpMessageToPlayer( player, popUpText)
		if ( classNum != 14 && classNum != 15) {
			player.GiveWeapon( secondary )
		}
		else {
			if (classNum == 14)
				player.GiveWeapon( "mp_weapon_smart_pistol", ["extended_ammo","pas_run_and_gun","tactical_cdr_on_kill"])
			if (classNum == 15)
				player.GiveWeapon( "mp_weapon_hemlok_smg", ["pas_fast_swap", "pas_fast_ads", "pas_fast_reload", "grunt_secondary", "holosight"])
		}
		if (antiTitanTrue == true)
		{
			if ( classNum == 15 ) {
				player.GiveWeapon( "mp_weapon_hemlok", ["anti_titan","redline_sight"])
			}
			else if (antiTitan == "mp_weapon_arc_launcher" && pMods == "Pilot")
			{
				if ( classNum == 14)
					player.GiveWeapon( antiTitan, ["pas_fast_reload","pas_fast_ads","tactical_cdr_on_kill","at_unlimited_ammo","burn_mod_arc_launcher"] )
				else
					player.GiveWeapon( antiTitan, ["at_unlimited_ammo"] )
			}
			else
			{
				player.GiveWeapon( antiTitan )
			}
		}
		if (pilotMelee == true)
		{
			player.GiveOffhandWeapon( "melee_pilot_kunai", OFFHAND_MELEE)
		}
		else
		{
			player.GiveOffhandWeapon( "melee_pilot_emptyhanded", OFFHAND_MELEE, ["grunt_mode"] )
		}
		if (pMods == "Spectre")
		{
			player.SetPlayerSettingsWithMods( player.GetPlayerSettings(), ["make_mechanical", "enable_double", "disable_wallrun", "less_powerful_gilde", "spectre_speedmod","spectre_health","pas_stealth_movement", "spectre_slide"])
		}
		else if (pMods == "Spectre Leader")
		{
			player.SetPlayerSettingsWithMods( player.GetPlayerSettings(), ["make_mechanical", "enable_double", "disable_wallrun", "less_powerful_gilde", "spectre_speedmod","captain_health","pas_stealth_movement", "spectre_slide"])
		}
		else if (pMods == "Stalker")
		{
			player.SetPlayerSettingsWithMods( player.GetPlayerSettings(), ["make_mechanical", "stalker_healthregen", "disable_wallrun", "less_powerful_gilde", "stalker_speedmod","captain_health","pas_stealth_movement","stalker_slide"])
		}
		else if (pMods == "Pilot")
		{
			player.SetPlayerSettingsWithMods( player.GetPlayerSettings(), ["enable_double", "enable_wallrun","captain_health","pilot_speedmod"])
		}
		else if (pMods == "Captain")
		{
			player.SetPlayerSettingsWithMods( player.GetPlayerSettings(), ["non_mechanical", "disable_doublejump", "disable_wallrun", "less_powerful_gilde","pas_stealth_movement","captain_health"])
		}
		else if (pMods == "Specialist")
		{
			player.SetPlayerSettingsWithMods( player.GetPlayerSettings(), ["make_mechanical", "disable_doublejump", "disable_wallrun", "less_powerful_gilde","pas_stealth_movement","specialist_health"])
		}
		else if (pMods == "Tech")
		{
			player.SetPlayerSettingsWithMods( player.GetPlayerSettings(), ["non_mechanical", "disable_doublejump", "disable_wallrun", "less_powerful_gilde","pas_stealth_movement", "specialist_health"])
		}
		else if (pMods == "Hemlok")
		{
			player.SetPlayerSettingsWithMods( player.GetPlayerSettings(), ["non_mechanical", "specialist_health", "disable_doublejump", "disable_wallrun", "less_powerful_gilde","pas_stealth_movement"])
		}
		else //Normal Grunts
		{
			player.SetPlayerSettingsWithMods( player.GetPlayerSettings(), ["non_mechanical", "disable_doublejump", "disable_wallrun", "less_powerful_gilde","pas_stealth_movement"])
		}
		SetGruntSkin( player, pMods, pModel)
	}
}